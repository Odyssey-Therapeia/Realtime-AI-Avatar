{"ast":null,"code":"import{RealtimeEventHandler}from'./event_handler.js';import{RealtimeAPI}from'./api.js';import{RealtimeConversation}from'./conversation.js';import{RealtimeUtils}from'./utils.js';/**\n * Valid audio formats\n * @typedef {\"pcm16\"|\"g711-ulaw\"|\"g711-alaw\"} AudioFormatType\n *//**\n * @typedef {Object} AudioTranscriptionType\n * @property {boolean} [enabled]\n * @property {\"whisper-1\"} model\n *//**\n * @typedef {Object} TurnDetectionServerVadType\n * @property {\"server_vad\"} type\n * @property {number} [threshold]\n * @property {number} [prefix_padding_ms]\n * @property {number} [silence_duration_ms]\n *//**\n * Tool definitions\n * @typedef {Object} ToolDefinitionType\n * @property {\"function\"} [type]\n * @property {string} name\n * @property {string} description\n * @property {{[key: string]: any}} parameters\n *//**\n * @typedef {Object} SessionResourceType\n * @property {string} [model]\n * @property {string[]} [modalities]\n * @property {string} [instructions]\n * @property {\"alloy\"|\"shimmer\"|\"echo\"} [voice]\n * @property {AudioFormatType} [input_audio_format]\n * @property {AudioFormatType} [output_audio_format]\n * @property {AudioTranscriptionType|null} [input_audio_transcription]\n * @property {TurnDetectionServerVadType|null} [turn_detection]\n * @property {ToolDefinitionType[]} [tools]\n * @property {\"auto\"|\"none\"|\"required\"|{type:\"function\",name:string}} [tool_choice]\n * @property {number} [temperature]\n * @property {number|\"inf\"} [max_response_output_tokens]\n *//**\n * @typedef {\"in_progress\"|\"completed\"|\"incomplete\"} ItemStatusType\n *//**\n * @typedef {Object} InputTextContentType\n * @property {\"input_text\"} type\n * @property {string} text\n *//**\n * @typedef {Object} InputAudioContentType\n * @property {\"input_audio\"} type\n * @property {string} [audio] base64-encoded audio data\n * @property {string|null} [transcript]\n *//**\n * @typedef {Object} TextContentType\n * @property {\"text\"} type\n * @property {string} text\n *//**\n * @typedef {Object} AudioContentType\n * @property {\"audio\"} type\n * @property {string} [audio] base64-encoded audio data\n * @property {string|null} [transcript]\n *//**\n * @typedef {Object} SystemItemType\n * @property {string|null} [previous_item_id]\n * @property {\"message\"} type\n * @property {ItemStatusType} status\n * @property {\"system\"} role\n * @property {Array<InputTextContentType>} content\n *//**\n * @typedef {Object} UserItemType\n * @property {string|null} [previous_item_id]\n * @property {\"message\"} type\n * @property {ItemStatusType} status\n * @property {\"system\"} role\n * @property {Array<InputTextContentType|InputAudioContentType>} content\n *//**\n * @typedef {Object} AssistantItemType\n * @property {string|null} [previous_item_id]\n * @property {\"message\"} type\n * @property {ItemStatusType} status\n * @property {\"assistant\"} role\n * @property {Array<TextContentType|AudioContentType>} content\n *//**\n * @typedef {Object} FunctionCallItemType\n * @property {string|null} [previous_item_id]\n * @property {\"function_call\"} type\n * @property {ItemStatusType} status\n * @property {string} call_id\n * @property {string} name\n * @property {string} arguments\n *//**\n * @typedef {Object} FunctionCallOutputItemType\n * @property {string|null} [previous_item_id]\n * @property {\"function_call_output\"} type\n * @property {string} call_id\n * @property {string} output\n *//**\n * @typedef {Object} FormattedToolType\n * @property {\"function\"} type\n * @property {string} name\n * @property {string} call_id\n * @property {string} arguments\n *//**\n * @typedef {Object} FormattedPropertyType\n * @property {Int16Array} [audio]\n * @property {string} [text]\n * @property {string} [transcript]\n * @property {FormattedToolType} [tool]\n * @property {string} [output]\n * @property {any} [file]\n *//**\n * @typedef {Object} FormattedItemType\n * @property {string} id\n * @property {string} object\n * @property {\"user\"|\"assistant\"|\"system\"} [role]\n * @property {FormattedPropertyType} formatted\n *//**\n * @typedef {SystemItemType|UserItemType|AssistantItemType|FunctionCallItemType|FunctionCallOutputItemType} BaseItemType\n *//**\n * @typedef {FormattedItemType & BaseItemType} ItemType\n *//**\n * @typedef {Object} IncompleteResponseStatusType\n * @property {\"incomplete\"} type\n * @property {\"interruption\"|\"max_output_tokens\"|\"content_filter\"} reason\n *//**\n * @typedef {Object} FailedResponseStatusType\n * @property {\"failed\"} type\n * @property {{code: string, message: string}|null} error\n *//**\n * @typedef {Object} UsageType\n * @property {number} total_tokens\n * @property {number} input_tokens\n * @property {number} output_tokens\n *//**\n * @typedef {Object} ResponseResourceType\n * @property {\"in_progress\"|\"completed\"|\"incomplete\"|\"cancelled\"|\"failed\"} status\n * @property {IncompleteResponseStatusType|FailedResponseStatusType|null} status_details\n * @property {ItemType[]} output\n * @property {UsageType|null} usage\n *//**\n * RealtimeClient Class\n * @class\n */export class RealtimeClient extends RealtimeEventHandler{/**\n   * Create a new RealtimeClient instance\n   * @param {{url?: string, apiKey?: string, dangerouslyAllowAPIKeyInBrowser?: boolean, debug?: boolean}} [settings]\n   */constructor(){let{url,apiKey,dangerouslyAllowAPIKeyInBrowser,debug}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};super();this.defaultSessionConfig={modalities:['text','audio'],instructions:'',voice:'echo',input_audio_format:'pcm16',output_audio_format:'pcm16',input_audio_transcription:null,turn_detection:null,tools:[],tool_choice:'auto',temperature:0.8,max_response_output_tokens:4096};this.sessionConfig={};this.transcriptionModels=[{model:'whisper-1'}];this.defaultServerVadConfig={type:'server_vad',threshold:0.5,// 0.0 to 1.0,\nprefix_padding_ms:300,// How much audio to include in the audio stream before the speech starts.\nsilence_duration_ms:200// How long to wait to mark the speech as stopped.\n};this.realtime=new RealtimeAPI({url,apiKey,dangerouslyAllowAPIKeyInBrowser,debug});this.conversation=new RealtimeConversation();this._resetConfig();this._addAPIEventHandlers();}/**\n   * Resets sessionConfig and conversationConfig to default\n   * @private\n   * @returns {true}\n   */_resetConfig(){this.sessionCreated=false;this.tools={};this.sessionConfig=JSON.parse(JSON.stringify(this.defaultSessionConfig));this.inputAudioBuffer=new Int16Array(0);return true;}/**\n   * Sets up event handlers for a fully-functional application control flow\n   * @private\n   * @returns {true}\n   */_addAPIEventHandlers(){var _this=this;// Event Logging handlers\nthis.realtime.on('client.*',event=>{const realtimeEvent={time:new Date().toISOString(),source:'client',event:event};this.dispatch('realtime.event',realtimeEvent);});this.realtime.on('server.*',event=>{const realtimeEvent={time:new Date().toISOString(),source:'server',event:event};this.dispatch('realtime.event',realtimeEvent);});// Handles session created event, can optionally wait for it\nthis.realtime.on('server.session.created',()=>this.sessionCreated=true);// Setup for application control flow\nconst handler=function(event){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}const{item,delta}=_this.conversation.processEvent(event,...args);return{item,delta};};const handlerWithDispatch=function(event){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}const{item,delta}=handler(event,...args);if(item){// FIXME: If statement is only here because item.input_audio_transcription.completed\n//        can fire before `item.created`, resulting in empty item.\n//        This happens in VAD mode with empty audio\n_this.dispatch('conversation.updated',{item,delta});}return{item,delta};};const callTool=async tool=>{try{const jsonArguments=JSON.parse(tool.arguments);const toolConfig=this.tools[tool.name];if(!toolConfig){throw new Error(`Tool \"${tool.name}\" has not been added`);}const result=await toolConfig.handler(jsonArguments);this.realtime.send('conversation.item.create',{item:{type:'function_call_output',call_id:tool.call_id,output:JSON.stringify(result)}});}catch(e){this.realtime.send('conversation.item.create',{item:{type:'function_call_output',call_id:tool.call_id,output:JSON.stringify({error:e.message})}});}this.createResponse();};// Handlers to update internal conversation state\nthis.realtime.on('server.response.created',handler);this.realtime.on('server.response.output_item.added',handler);this.realtime.on('server.response.content_part.added',handler);this.realtime.on('server.input_audio_buffer.speech_started',event=>{handler(event);this.dispatch('conversation.interrupted');});this.realtime.on('server.input_audio_buffer.speech_stopped',event=>handler(event,this.inputAudioBuffer));// Handlers to update application state\nthis.realtime.on('server.conversation.item.created',event=>{const{item}=handlerWithDispatch(event);this.dispatch('conversation.item.appended',{item});if(item.status==='completed'){this.dispatch('conversation.item.completed',{item});}});this.realtime.on('server.conversation.item.truncated',handlerWithDispatch);this.realtime.on('server.conversation.item.deleted',handlerWithDispatch);this.realtime.on('server.conversation.item.input_audio_transcription.completed',handlerWithDispatch);this.realtime.on('server.response.audio_transcript.delta',handlerWithDispatch);this.realtime.on('server.response.audio.delta',handlerWithDispatch);this.realtime.on('server.response.text.delta',handlerWithDispatch);this.realtime.on('server.response.function_call_arguments.delta',handlerWithDispatch);this.realtime.on('server.response.output_item.done',async event=>{const{item}=handlerWithDispatch(event);if(item.status==='completed'){this.dispatch('conversation.item.completed',{item});}if(item.formatted.tool){callTool(item.formatted.tool);}});return true;}/**\n   * Tells us whether the realtime socket is connected and the session has started\n   * @returns {boolean}\n   */isConnected(){return this.realtime.isConnected();}/**\n   * Resets the client instance entirely: disconnects and clears active config\n   * @returns {true}\n   */reset(){this.disconnect();this.clearEventHandlers();this.realtime.clearEventHandlers();this._resetConfig();this._addAPIEventHandlers();return true;}/**\n   * Connects to the Realtime WebSocket API\n   * Updates session config and conversation config\n   * @returns {Promise<true>}\n   */async connect(){if(this.isConnected()){throw new Error(`Already connected, use .disconnect() first`);}await this.realtime.connect();this.updateSession();return true;}/**\n   * Waits for a session.created event to be executed before proceeding\n   * @returns {Promise<true>}\n   */async waitForSessionCreated(){if(!this.isConnected()){throw new Error(`Not connected, use .connect() first`);}while(!this.sessionCreated){await new Promise(r=>setTimeout(()=>r(),1));}return true;}/**\n   * Disconnects from the Realtime API and clears the conversation history\n   */disconnect(){this.sessionCreated=false;this.conversation.clear();this.realtime.isConnected()&&this.realtime.disconnect();}/**\n   * Gets the active turn detection mode\n   * @returns {\"server_vad\"|null}\n   */getTurnDetectionType(){var _this$sessionConfig$t;return((_this$sessionConfig$t=this.sessionConfig.turn_detection)===null||_this$sessionConfig$t===void 0?void 0:_this$sessionConfig$t.type)||null;}/**\n   * Add a tool and handler\n   * @param {ToolDefinitionType} definition\n   * @param {function} handler\n   * @returns {{definition: ToolDefinitionType, handler: function}}\n   */addTool(definition,handler){if(!(definition!==null&&definition!==void 0&&definition.name)){throw new Error(`Missing tool name in definition`);}const name=definition===null||definition===void 0?void 0:definition.name;if(this.tools[name]){throw new Error(`Tool \"${name}\" already added. Please use .removeTool(\"${name}\") before trying to add again.`);}if(typeof handler!=='function'){throw new Error(`Tool \"${name}\" handler must be a function`);}this.tools[name]={definition,handler};this.updateSession();return this.tools[name];}/**\n   * Removes a tool\n   * @param {string} name\n   * @returns {true}\n   */removeTool(name){if(!this.tools[name]){throw new Error(`Tool \"${name}\" does not exist, can not be removed.`);}delete this.tools[name];return true;}/**\n   * Deletes an item\n   * @param {string} id\n   * @returns {true}\n   */deleteItem(id){this.realtime.send('conversation.item.delete',{item_id:id});return true;}/**\n   * Updates session configuration\n   * If the client is not yet connected, will save details and instantiate upon connection\n   * @param {SessionResourceType} [sessionConfig]\n   */updateSession(){let{modalities=void 0,instructions=void 0,voice=void 0,input_audio_format=void 0,output_audio_format=void 0,input_audio_transcription=void 0,turn_detection=void 0,tools=void 0,tool_choice=void 0,temperature=void 0,max_response_output_tokens=void 0}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};modalities!==void 0&&(this.sessionConfig.modalities=modalities);instructions!==void 0&&(this.sessionConfig.instructions=instructions);voice!==void 0&&(this.sessionConfig.voice=voice);input_audio_format!==void 0&&(this.sessionConfig.input_audio_format=input_audio_format);output_audio_format!==void 0&&(this.sessionConfig.output_audio_format=output_audio_format);input_audio_transcription!==void 0&&(this.sessionConfig.input_audio_transcription=input_audio_transcription);turn_detection!==void 0&&(this.sessionConfig.turn_detection=turn_detection);tools!==void 0&&(this.sessionConfig.tools=tools);tool_choice!==void 0&&(this.sessionConfig.tool_choice=tool_choice);temperature!==void 0&&(this.sessionConfig.temperature=temperature);max_response_output_tokens!==void 0&&(this.sessionConfig.max_response_output_tokens=max_response_output_tokens);// Load tools from tool definitions + already loaded tools\nconst useTools=[].concat((tools||[]).map(toolDefinition=>{const definition={type:'function',...toolDefinition};if(this.tools[definition===null||definition===void 0?void 0:definition.name]){throw new Error(`Tool \"${definition===null||definition===void 0?void 0:definition.name}\" has already been defined`);}return definition;}),Object.keys(this.tools).map(key=>{return{type:'function',...this.tools[key].definition};}));const session={...this.sessionConfig};session.tools=useTools;if(this.realtime.isConnected()){this.realtime.send('session.update',{session});}return true;}/**\n   * Sends user message content and generates a response\n   * @param {Array<InputTextContentType|InputAudioContentType>} content\n   * @returns {true}\n   */sendUserMessageContent(){let content=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];if(content.length){for(const c of content){if(c.type==='input_audio'){if(c.audio instanceof ArrayBuffer||c.audio instanceof Int16Array){c.audio=RealtimeUtils.arrayBufferToBase64(c.audio);}}}this.realtime.send('conversation.item.create',{item:{type:'message',role:'user',content}});}this.createResponse();return true;}/**\n   * Appends user audio to the existing audio buffer\n   * @param {Int16Array|ArrayBuffer} arrayBuffer\n   * @returns {true}\n   */appendInputAudio(arrayBuffer){if(arrayBuffer.byteLength>0){this.realtime.send('input_audio_buffer.append',{audio:RealtimeUtils.arrayBufferToBase64(arrayBuffer)});this.inputAudioBuffer=RealtimeUtils.mergeInt16Arrays(this.inputAudioBuffer,arrayBuffer);}return true;}/**\n   * Forces a model response generation\n   * @returns {true}\n   */createResponse(){if(this.getTurnDetectionType()===null&&this.inputAudioBuffer.byteLength>0){this.realtime.send('input_audio_buffer.commit');this.conversation.queueInputAudio(this.inputAudioBuffer);this.inputAudioBuffer=new Int16Array(0);}this.realtime.send('response.create');return true;}/**\n   * Cancels the ongoing server generation and truncates ongoing generation, if applicable\n   * If no id provided, will simply call `cancel_generation` command\n   * @param {string} id The id of the message to cancel\n   * @param {number} [sampleCount] The number of samples to truncate past for the ongoing generation\n   * @returns {{item: (AssistantItemType | null)}}\n   */cancelResponse(id){let sampleCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(!id){this.realtime.send('response.cancel');return{item:null};}else if(id){const item=this.conversation.getItem(id);if(!item){throw new Error(`Could not find item \"${id}\"`);}if(item.type!=='message'){throw new Error(`Can only cancelResponse messages with type \"message\"`);}else if(item.role!=='assistant'){throw new Error(`Can only cancelResponse messages with role \"assistant\"`);}this.realtime.send('response.cancel');const audioIndex=item.content.findIndex(c=>c.type==='audio');if(audioIndex===-1){throw new Error(`Could not find audio on item to cancel`);}this.realtime.send('conversation.item.truncate',{item_id:id,content_index:audioIndex,audio_end_ms:Math.floor(sampleCount/this.conversation.defaultFrequency*1000)});return{item};}}/**\n   * Utility for waiting for the next `conversation.item.appended` event to be triggered by the server\n   * @returns {Promise<{item: ItemType}>}\n   */async waitForNextItem(){const event=await this.waitForNext('conversation.item.appended');const{item}=event;return{item};}/**\n   * Utility for waiting for the next `conversation.item.completed` event to be triggered by the server\n   * @returns {Promise<{item: ItemType}>}\n   */async waitForNextCompletedItem(){const event=await this.waitForNext('conversation.item.completed');const{item}=event;return{item};}}","map":{"version":3,"names":["RealtimeEventHandler","RealtimeAPI","RealtimeConversation","RealtimeUtils","RealtimeClient","constructor","url","apiKey","dangerouslyAllowAPIKeyInBrowser","debug","arguments","length","undefined","defaultSessionConfig","modalities","instructions","voice","input_audio_format","output_audio_format","input_audio_transcription","turn_detection","tools","tool_choice","temperature","max_response_output_tokens","sessionConfig","transcriptionModels","model","defaultServerVadConfig","type","threshold","prefix_padding_ms","silence_duration_ms","realtime","conversation","_resetConfig","_addAPIEventHandlers","sessionCreated","JSON","parse","stringify","inputAudioBuffer","Int16Array","_this","on","event","realtimeEvent","time","Date","toISOString","source","dispatch","handler","_len","args","Array","_key","item","delta","processEvent","handlerWithDispatch","_len2","_key2","callTool","tool","jsonArguments","toolConfig","name","Error","result","send","call_id","output","e","error","message","createResponse","status","formatted","isConnected","reset","disconnect","clearEventHandlers","connect","updateSession","waitForSessionCreated","Promise","r","setTimeout","clear","getTurnDetectionType","_this$sessionConfig$t","addTool","definition","removeTool","deleteItem","id","item_id","useTools","concat","map","toolDefinition","Object","keys","key","session","sendUserMessageContent","content","c","audio","ArrayBuffer","arrayBufferToBase64","role","appendInputAudio","arrayBuffer","byteLength","mergeInt16Arrays","queueInputAudio","cancelResponse","sampleCount","getItem","audioIndex","findIndex","content_index","audio_end_ms","Math","floor","defaultFrequency","waitForNextItem","waitForNext","waitForNextCompletedItem"],"sources":["/Users/johnpaulreju/git_dashboard/simli/simli-openai-realtime/src/lib/realtime-api-beta/lib/client.js"],"sourcesContent":["import { RealtimeEventHandler } from './event_handler.js';\nimport { RealtimeAPI } from './api.js';\nimport { RealtimeConversation } from './conversation.js';\nimport { RealtimeUtils } from './utils.js';\n\n/**\n * Valid audio formats\n * @typedef {\"pcm16\"|\"g711-ulaw\"|\"g711-alaw\"} AudioFormatType\n */\n\n/**\n * @typedef {Object} AudioTranscriptionType\n * @property {boolean} [enabled]\n * @property {\"whisper-1\"} model\n */\n\n/**\n * @typedef {Object} TurnDetectionServerVadType\n * @property {\"server_vad\"} type\n * @property {number} [threshold]\n * @property {number} [prefix_padding_ms]\n * @property {number} [silence_duration_ms]\n */\n\n/**\n * Tool definitions\n * @typedef {Object} ToolDefinitionType\n * @property {\"function\"} [type]\n * @property {string} name\n * @property {string} description\n * @property {{[key: string]: any}} parameters\n */\n\n/**\n * @typedef {Object} SessionResourceType\n * @property {string} [model]\n * @property {string[]} [modalities]\n * @property {string} [instructions]\n * @property {\"alloy\"|\"shimmer\"|\"echo\"} [voice]\n * @property {AudioFormatType} [input_audio_format]\n * @property {AudioFormatType} [output_audio_format]\n * @property {AudioTranscriptionType|null} [input_audio_transcription]\n * @property {TurnDetectionServerVadType|null} [turn_detection]\n * @property {ToolDefinitionType[]} [tools]\n * @property {\"auto\"|\"none\"|\"required\"|{type:\"function\",name:string}} [tool_choice]\n * @property {number} [temperature]\n * @property {number|\"inf\"} [max_response_output_tokens]\n */\n\n/**\n * @typedef {\"in_progress\"|\"completed\"|\"incomplete\"} ItemStatusType\n */\n\n/**\n * @typedef {Object} InputTextContentType\n * @property {\"input_text\"} type\n * @property {string} text\n */\n\n/**\n * @typedef {Object} InputAudioContentType\n * @property {\"input_audio\"} type\n * @property {string} [audio] base64-encoded audio data\n * @property {string|null} [transcript]\n */\n\n/**\n * @typedef {Object} TextContentType\n * @property {\"text\"} type\n * @property {string} text\n */\n\n/**\n * @typedef {Object} AudioContentType\n * @property {\"audio\"} type\n * @property {string} [audio] base64-encoded audio data\n * @property {string|null} [transcript]\n */\n\n/**\n * @typedef {Object} SystemItemType\n * @property {string|null} [previous_item_id]\n * @property {\"message\"} type\n * @property {ItemStatusType} status\n * @property {\"system\"} role\n * @property {Array<InputTextContentType>} content\n */\n\n/**\n * @typedef {Object} UserItemType\n * @property {string|null} [previous_item_id]\n * @property {\"message\"} type\n * @property {ItemStatusType} status\n * @property {\"system\"} role\n * @property {Array<InputTextContentType|InputAudioContentType>} content\n */\n\n/**\n * @typedef {Object} AssistantItemType\n * @property {string|null} [previous_item_id]\n * @property {\"message\"} type\n * @property {ItemStatusType} status\n * @property {\"assistant\"} role\n * @property {Array<TextContentType|AudioContentType>} content\n */\n\n/**\n * @typedef {Object} FunctionCallItemType\n * @property {string|null} [previous_item_id]\n * @property {\"function_call\"} type\n * @property {ItemStatusType} status\n * @property {string} call_id\n * @property {string} name\n * @property {string} arguments\n */\n\n/**\n * @typedef {Object} FunctionCallOutputItemType\n * @property {string|null} [previous_item_id]\n * @property {\"function_call_output\"} type\n * @property {string} call_id\n * @property {string} output\n */\n\n/**\n * @typedef {Object} FormattedToolType\n * @property {\"function\"} type\n * @property {string} name\n * @property {string} call_id\n * @property {string} arguments\n */\n\n/**\n * @typedef {Object} FormattedPropertyType\n * @property {Int16Array} [audio]\n * @property {string} [text]\n * @property {string} [transcript]\n * @property {FormattedToolType} [tool]\n * @property {string} [output]\n * @property {any} [file]\n */\n\n/**\n * @typedef {Object} FormattedItemType\n * @property {string} id\n * @property {string} object\n * @property {\"user\"|\"assistant\"|\"system\"} [role]\n * @property {FormattedPropertyType} formatted\n */\n\n/**\n * @typedef {SystemItemType|UserItemType|AssistantItemType|FunctionCallItemType|FunctionCallOutputItemType} BaseItemType\n */\n\n/**\n * @typedef {FormattedItemType & BaseItemType} ItemType\n */\n\n/**\n * @typedef {Object} IncompleteResponseStatusType\n * @property {\"incomplete\"} type\n * @property {\"interruption\"|\"max_output_tokens\"|\"content_filter\"} reason\n */\n\n/**\n * @typedef {Object} FailedResponseStatusType\n * @property {\"failed\"} type\n * @property {{code: string, message: string}|null} error\n */\n\n/**\n * @typedef {Object} UsageType\n * @property {number} total_tokens\n * @property {number} input_tokens\n * @property {number} output_tokens\n */\n\n/**\n * @typedef {Object} ResponseResourceType\n * @property {\"in_progress\"|\"completed\"|\"incomplete\"|\"cancelled\"|\"failed\"} status\n * @property {IncompleteResponseStatusType|FailedResponseStatusType|null} status_details\n * @property {ItemType[]} output\n * @property {UsageType|null} usage\n */\n\n/**\n * RealtimeClient Class\n * @class\n */\nexport class RealtimeClient extends RealtimeEventHandler {\n  /**\n   * Create a new RealtimeClient instance\n   * @param {{url?: string, apiKey?: string, dangerouslyAllowAPIKeyInBrowser?: boolean, debug?: boolean}} [settings]\n   */\n  constructor({ url, apiKey, dangerouslyAllowAPIKeyInBrowser, debug } = {}) {\n    super();\n    this.defaultSessionConfig = {\n      modalities: ['text', 'audio'],\n      instructions: '',\n      voice: 'echo',\n      input_audio_format: 'pcm16',\n      output_audio_format: 'pcm16',\n      input_audio_transcription: null,\n      turn_detection: null,\n      tools: [],\n      tool_choice: 'auto',\n      temperature: 0.8,\n      max_response_output_tokens: 4096,\n    };\n    this.sessionConfig = {};\n    this.transcriptionModels = [\n      {\n        model: 'whisper-1',\n      },\n    ];\n    this.defaultServerVadConfig = {\n      type: 'server_vad',\n      threshold: 0.5, // 0.0 to 1.0,\n      prefix_padding_ms: 300, // How much audio to include in the audio stream before the speech starts.\n      silence_duration_ms: 200, // How long to wait to mark the speech as stopped.\n    };\n    this.realtime = new RealtimeAPI({\n      url,\n      apiKey,\n      dangerouslyAllowAPIKeyInBrowser,\n      debug,\n    });\n    this.conversation = new RealtimeConversation();\n    this._resetConfig();\n    this._addAPIEventHandlers();\n  }\n\n  /**\n   * Resets sessionConfig and conversationConfig to default\n   * @private\n   * @returns {true}\n   */\n  _resetConfig() {\n    this.sessionCreated = false;\n    this.tools = {};\n    this.sessionConfig = JSON.parse(JSON.stringify(this.defaultSessionConfig));\n    this.inputAudioBuffer = new Int16Array(0);\n    return true;\n  }\n\n  /**\n   * Sets up event handlers for a fully-functional application control flow\n   * @private\n   * @returns {true}\n   */\n  _addAPIEventHandlers() {\n    // Event Logging handlers\n    this.realtime.on('client.*', (event) => {\n      const realtimeEvent = {\n        time: new Date().toISOString(),\n        source: 'client',\n        event: event,\n      };\n      this.dispatch('realtime.event', realtimeEvent);\n    });\n    this.realtime.on('server.*', (event) => {\n      const realtimeEvent = {\n        time: new Date().toISOString(),\n        source: 'server',\n        event: event,\n      };\n      this.dispatch('realtime.event', realtimeEvent);\n    });\n\n    // Handles session created event, can optionally wait for it\n    this.realtime.on(\n      'server.session.created',\n      () => (this.sessionCreated = true),\n    );\n\n    // Setup for application control flow\n    const handler = (event, ...args) => {\n      const { item, delta } = this.conversation.processEvent(event, ...args);\n      return { item, delta };\n    };\n    const handlerWithDispatch = (event, ...args) => {\n      const { item, delta } = handler(event, ...args);\n      if (item) {\n        // FIXME: If statement is only here because item.input_audio_transcription.completed\n        //        can fire before `item.created`, resulting in empty item.\n        //        This happens in VAD mode with empty audio\n        this.dispatch('conversation.updated', { item, delta });\n      }\n      return { item, delta };\n    };\n    const callTool = async (tool) => {\n      try {\n        const jsonArguments = JSON.parse(tool.arguments);\n        const toolConfig = this.tools[tool.name];\n        if (!toolConfig) {\n          throw new Error(`Tool \"${tool.name}\" has not been added`);\n        }\n        const result = await toolConfig.handler(jsonArguments);\n        this.realtime.send('conversation.item.create', {\n          item: {\n            type: 'function_call_output',\n            call_id: tool.call_id,\n            output: JSON.stringify(result),\n          },\n        });\n      } catch (e) {\n        this.realtime.send('conversation.item.create', {\n          item: {\n            type: 'function_call_output',\n            call_id: tool.call_id,\n            output: JSON.stringify({ error: e.message }),\n          },\n        });\n      }\n      this.createResponse();\n    };\n\n    // Handlers to update internal conversation state\n    this.realtime.on('server.response.created', handler);\n    this.realtime.on('server.response.output_item.added', handler);\n    this.realtime.on('server.response.content_part.added', handler);\n    this.realtime.on('server.input_audio_buffer.speech_started', (event) => {\n      handler(event);\n      this.dispatch('conversation.interrupted');\n    });\n    this.realtime.on('server.input_audio_buffer.speech_stopped', (event) =>\n      handler(event, this.inputAudioBuffer),\n    );\n\n    // Handlers to update application state\n    this.realtime.on('server.conversation.item.created', (event) => {\n      const { item } = handlerWithDispatch(event);\n      this.dispatch('conversation.item.appended', { item });\n      if (item.status === 'completed') {\n        this.dispatch('conversation.item.completed', { item });\n      }\n    });\n    this.realtime.on('server.conversation.item.truncated', handlerWithDispatch);\n    this.realtime.on('server.conversation.item.deleted', handlerWithDispatch);\n    this.realtime.on(\n      'server.conversation.item.input_audio_transcription.completed',\n      handlerWithDispatch,\n    );\n    this.realtime.on(\n      'server.response.audio_transcript.delta',\n      handlerWithDispatch,\n    );\n    this.realtime.on('server.response.audio.delta', handlerWithDispatch);\n    this.realtime.on('server.response.text.delta', handlerWithDispatch);\n    this.realtime.on(\n      'server.response.function_call_arguments.delta',\n      handlerWithDispatch,\n    );\n    this.realtime.on('server.response.output_item.done', async (event) => {\n      const { item } = handlerWithDispatch(event);\n      if (item.status === 'completed') {\n        this.dispatch('conversation.item.completed', { item });\n      }\n      if (item.formatted.tool) {\n        callTool(item.formatted.tool);\n      }\n    });\n\n    return true;\n  }\n\n  /**\n   * Tells us whether the realtime socket is connected and the session has started\n   * @returns {boolean}\n   */\n  isConnected() {\n    return this.realtime.isConnected();\n  }\n\n  /**\n   * Resets the client instance entirely: disconnects and clears active config\n   * @returns {true}\n   */\n  reset() {\n    this.disconnect();\n    this.clearEventHandlers();\n    this.realtime.clearEventHandlers();\n    this._resetConfig();\n    this._addAPIEventHandlers();\n    return true;\n  }\n\n  /**\n   * Connects to the Realtime WebSocket API\n   * Updates session config and conversation config\n   * @returns {Promise<true>}\n   */\n  async connect() {\n    if (this.isConnected()) {\n      throw new Error(`Already connected, use .disconnect() first`);\n    }\n    await this.realtime.connect();\n    this.updateSession();\n    return true;\n  }\n\n  /**\n   * Waits for a session.created event to be executed before proceeding\n   * @returns {Promise<true>}\n   */\n  async waitForSessionCreated() {\n    if (!this.isConnected()) {\n      throw new Error(`Not connected, use .connect() first`);\n    }\n    while (!this.sessionCreated) {\n      await new Promise((r) => setTimeout(() => r(), 1));\n    }\n    return true;\n  }\n\n  /**\n   * Disconnects from the Realtime API and clears the conversation history\n   */\n  disconnect() {\n    this.sessionCreated = false;\n    this.conversation.clear();\n    this.realtime.isConnected() && this.realtime.disconnect();\n  }\n\n  /**\n   * Gets the active turn detection mode\n   * @returns {\"server_vad\"|null}\n   */\n  getTurnDetectionType() {\n    return this.sessionConfig.turn_detection?.type || null;\n  }\n\n  /**\n   * Add a tool and handler\n   * @param {ToolDefinitionType} definition\n   * @param {function} handler\n   * @returns {{definition: ToolDefinitionType, handler: function}}\n   */\n  addTool(definition, handler) {\n    if (!definition?.name) {\n      throw new Error(`Missing tool name in definition`);\n    }\n    const name = definition?.name;\n    if (this.tools[name]) {\n      throw new Error(\n        `Tool \"${name}\" already added. Please use .removeTool(\"${name}\") before trying to add again.`,\n      );\n    }\n    if (typeof handler !== 'function') {\n      throw new Error(`Tool \"${name}\" handler must be a function`);\n    }\n    this.tools[name] = { definition, handler };\n    this.updateSession();\n    return this.tools[name];\n  }\n\n  /**\n   * Removes a tool\n   * @param {string} name\n   * @returns {true}\n   */\n  removeTool(name) {\n    if (!this.tools[name]) {\n      throw new Error(`Tool \"${name}\" does not exist, can not be removed.`);\n    }\n    delete this.tools[name];\n    return true;\n  }\n\n  /**\n   * Deletes an item\n   * @param {string} id\n   * @returns {true}\n   */\n  deleteItem(id) {\n    this.realtime.send('conversation.item.delete', { item_id: id });\n    return true;\n  }\n\n  /**\n   * Updates session configuration\n   * If the client is not yet connected, will save details and instantiate upon connection\n   * @param {SessionResourceType} [sessionConfig]\n   */\n  updateSession({\n    modalities = void 0,\n    instructions = void 0,\n    voice = void 0,\n    input_audio_format = void 0,\n    output_audio_format = void 0,\n    input_audio_transcription = void 0,\n    turn_detection = void 0,\n    tools = void 0,\n    tool_choice = void 0,\n    temperature = void 0,\n    max_response_output_tokens = void 0,\n  } = {}) {\n    modalities !== void 0 && (this.sessionConfig.modalities = modalities);\n    instructions !== void 0 && (this.sessionConfig.instructions = instructions);\n    voice !== void 0 && (this.sessionConfig.voice = voice);\n    input_audio_format !== void 0 &&\n      (this.sessionConfig.input_audio_format = input_audio_format);\n    output_audio_format !== void 0 &&\n      (this.sessionConfig.output_audio_format = output_audio_format);\n    input_audio_transcription !== void 0 &&\n      (this.sessionConfig.input_audio_transcription =\n        input_audio_transcription);\n    turn_detection !== void 0 &&\n      (this.sessionConfig.turn_detection = turn_detection);\n    tools !== void 0 && (this.sessionConfig.tools = tools);\n    tool_choice !== void 0 && (this.sessionConfig.tool_choice = tool_choice);\n    temperature !== void 0 && (this.sessionConfig.temperature = temperature);\n    max_response_output_tokens !== void 0 &&\n      (this.sessionConfig.max_response_output_tokens =\n        max_response_output_tokens);\n    // Load tools from tool definitions + already loaded tools\n    const useTools = [].concat(\n      (tools || []).map((toolDefinition) => {\n        const definition = {\n          type: 'function',\n          ...toolDefinition,\n        };\n        if (this.tools[definition?.name]) {\n          throw new Error(\n            `Tool \"${definition?.name}\" has already been defined`,\n          );\n        }\n        return definition;\n      }),\n      Object.keys(this.tools).map((key) => {\n        return {\n          type: 'function',\n          ...this.tools[key].definition,\n        };\n      }),\n    );\n    const session = { ...this.sessionConfig };\n    session.tools = useTools;\n    if (this.realtime.isConnected()) {\n      this.realtime.send('session.update', { session });\n    }\n    return true;\n  }\n\n  /**\n   * Sends user message content and generates a response\n   * @param {Array<InputTextContentType|InputAudioContentType>} content\n   * @returns {true}\n   */\n  sendUserMessageContent(content = []) {\n    if (content.length) {\n      for (const c of content) {\n        if (c.type === 'input_audio') {\n          if (c.audio instanceof ArrayBuffer || c.audio instanceof Int16Array) {\n            c.audio = RealtimeUtils.arrayBufferToBase64(c.audio);\n          }\n        }\n      }\n      this.realtime.send('conversation.item.create', {\n        item: {\n          type: 'message',\n          role: 'user',\n          content,\n        },\n      });\n    }\n    this.createResponse();\n    return true;\n  }\n\n  /**\n   * Appends user audio to the existing audio buffer\n   * @param {Int16Array|ArrayBuffer} arrayBuffer\n   * @returns {true}\n   */\n  appendInputAudio(arrayBuffer) {\n    if (arrayBuffer.byteLength > 0) {\n      this.realtime.send('input_audio_buffer.append', {\n        audio: RealtimeUtils.arrayBufferToBase64(arrayBuffer),\n      });\n      this.inputAudioBuffer = RealtimeUtils.mergeInt16Arrays(\n        this.inputAudioBuffer,\n        arrayBuffer,\n      );\n    }\n    return true;\n  }\n\n  /**\n   * Forces a model response generation\n   * @returns {true}\n   */\n  createResponse() {\n    if (\n      this.getTurnDetectionType() === null &&\n      this.inputAudioBuffer.byteLength > 0\n    ) {\n      this.realtime.send('input_audio_buffer.commit');\n      this.conversation.queueInputAudio(this.inputAudioBuffer);\n      this.inputAudioBuffer = new Int16Array(0);\n    }\n    this.realtime.send('response.create');\n    return true;\n  }\n\n  /**\n   * Cancels the ongoing server generation and truncates ongoing generation, if applicable\n   * If no id provided, will simply call `cancel_generation` command\n   * @param {string} id The id of the message to cancel\n   * @param {number} [sampleCount] The number of samples to truncate past for the ongoing generation\n   * @returns {{item: (AssistantItemType | null)}}\n   */\n  cancelResponse(id, sampleCount = 0) {\n    if (!id) {\n      this.realtime.send('response.cancel');\n      return { item: null };\n    } else if (id) {\n      const item = this.conversation.getItem(id);\n      if (!item) {\n        throw new Error(`Could not find item \"${id}\"`);\n      }\n      if (item.type !== 'message') {\n        throw new Error(`Can only cancelResponse messages with type \"message\"`);\n      } else if (item.role !== 'assistant') {\n        throw new Error(\n          `Can only cancelResponse messages with role \"assistant\"`,\n        );\n      }\n      this.realtime.send('response.cancel');\n      const audioIndex = item.content.findIndex((c) => c.type === 'audio');\n      if (audioIndex === -1) {\n        throw new Error(`Could not find audio on item to cancel`);\n      }\n      this.realtime.send('conversation.item.truncate', {\n        item_id: id,\n        content_index: audioIndex,\n        audio_end_ms: Math.floor(\n          (sampleCount / this.conversation.defaultFrequency) * 1000,\n        ),\n      });\n      return { item };\n    }\n  }\n\n  /**\n   * Utility for waiting for the next `conversation.item.appended` event to be triggered by the server\n   * @returns {Promise<{item: ItemType}>}\n   */\n  async waitForNextItem() {\n    const event = await this.waitForNext('conversation.item.appended');\n    const { item } = event;\n    return { item };\n  }\n\n  /**\n   * Utility for waiting for the next `conversation.item.completed` event to be triggered by the server\n   * @returns {Promise<{item: ItemType}>}\n   */\n  async waitForNextCompletedItem() {\n    const event = await this.waitForNext('conversation.item.completed');\n    const { item } = event;\n    return { item };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}