{"ast":null,"code":"const dataMap=new WeakMap();/**\n * Normalizes a Float32Array to Array(m): We use this to draw amplitudes on a graph\n * If we're rendering the same audio data, then we'll often be using\n * the same (data, m, downsamplePeaks) triplets so we give option to memoize\n */const normalizeArray=function(data,m){let downsamplePeaks=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let memoize=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let cache,mKey,dKey;if(memoize){mKey=m.toString();dKey=downsamplePeaks.toString();cache=dataMap.has(data)?dataMap.get(data):{};dataMap.set(data,cache);cache[mKey]=cache[mKey]||{};if(cache[mKey][dKey]){return cache[mKey][dKey];}}const n=data.length;const result=new Array(m);if(m<=n){// Downsampling\nresult.fill(0);const count=new Array(m).fill(0);for(let i=0;i<n;i++){const index=Math.floor(i*(m/n));if(downsamplePeaks){// take highest result in the set\nresult[index]=Math.max(result[index],Math.abs(data[i]));}else{result[index]+=Math.abs(data[i]);}count[index]++;}if(!downsamplePeaks){for(let i=0;i<result.length;i++){result[i]=result[i]/count[i];}}}else{for(let i=0;i<m;i++){const index=i*(n-1)/(m-1);const low=Math.floor(index);const high=Math.ceil(index);const t=index-low;if(high>=n){result[i]=data[n-1];}else{result[i]=data[low]*(1-t)+data[high]*t;}}}if(memoize){cache[mKey][dKey]=result;}return result;};export const WavRenderer={/**\n   * Renders a point-in-time snapshot of an audio sample, usually frequency values\n   * @param canvas\n   * @param ctx\n   * @param data\n   * @param color\n   * @param pointCount number of bars to render\n   * @param barWidth width of bars in px\n   * @param barSpacing spacing between bars in px\n   * @param center vertically center the bars\n   */drawBars:function(canvas,ctx,data,color){let pointCount=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;let barWidth=arguments.length>5&&arguments[5]!==undefined?arguments[5]:0;let barSpacing=arguments.length>6&&arguments[6]!==undefined?arguments[6]:0;let center=arguments.length>7&&arguments[7]!==undefined?arguments[7]:false;pointCount=Math.floor(Math.min(pointCount,(canvas.width-barSpacing)/(Math.max(barWidth,1)+barSpacing)));if(!pointCount){pointCount=Math.floor((canvas.width-barSpacing)/(Math.max(barWidth,1)+barSpacing));}if(!barWidth){barWidth=(canvas.width-barSpacing)/pointCount-barSpacing;}const points=normalizeArray(data,pointCount,true);for(let i=0;i<pointCount;i++){const amplitude=Math.abs(points[i]);const height=Math.max(1,amplitude*canvas.height);const x=barSpacing+i*(barWidth+barSpacing);const y=center?(canvas.height-height)/2:canvas.height-height;ctx.fillStyle=color;ctx.fillRect(x,y,barWidth,height);}}};","map":{"version":3,"names":["dataMap","WeakMap","normalizeArray","data","m","downsamplePeaks","arguments","length","undefined","memoize","cache","mKey","dKey","toString","has","get","set","n","result","Array","fill","count","i","index","Math","floor","max","abs","low","high","ceil","t","WavRenderer","drawBars","canvas","ctx","color","pointCount","barWidth","barSpacing","center","min","width","points","amplitude","height","x","y","fillStyle","fillRect"],"sources":["/Users/johnpaulreju/git_dashboard/simli/simli-openai-realtime/src/utils/wav_renderer.ts"],"sourcesContent":["const dataMap = new WeakMap();\n\n/**\n * Normalizes a Float32Array to Array(m): We use this to draw amplitudes on a graph\n * If we're rendering the same audio data, then we'll often be using\n * the same (data, m, downsamplePeaks) triplets so we give option to memoize\n */\nconst normalizeArray = (\n  data: Float32Array,\n  m: number,\n  downsamplePeaks: boolean = false,\n  memoize: boolean = false\n) => {\n  let cache, mKey, dKey;\n  if (memoize) {\n    mKey = m.toString();\n    dKey = downsamplePeaks.toString();\n    cache = dataMap.has(data) ? dataMap.get(data) : {};\n    dataMap.set(data, cache);\n    cache[mKey] = cache[mKey] || {};\n    if (cache[mKey][dKey]) {\n      return cache[mKey][dKey];\n    }\n  }\n  const n = data.length;\n  const result = new Array(m);\n  if (m <= n) {\n    // Downsampling\n    result.fill(0);\n    const count = new Array(m).fill(0);\n    for (let i = 0; i < n; i++) {\n      const index = Math.floor(i * (m / n));\n      if (downsamplePeaks) {\n        // take highest result in the set\n        result[index] = Math.max(result[index], Math.abs(data[i]));\n      } else {\n        result[index] += Math.abs(data[i]);\n      }\n      count[index]++;\n    }\n    if (!downsamplePeaks) {\n      for (let i = 0; i < result.length; i++) {\n        result[i] = result[i] / count[i];\n      }\n    }\n  } else {\n    for (let i = 0; i < m; i++) {\n      const index = (i * (n - 1)) / (m - 1);\n      const low = Math.floor(index);\n      const high = Math.ceil(index);\n      const t = index - low;\n      if (high >= n) {\n        result[i] = data[n - 1];\n      } else {\n        result[i] = data[low] * (1 - t) + data[high] * t;\n      }\n    }\n  }\n  if (memoize) {\n    cache[mKey as string][dKey as string] = result;\n  }\n  return result;\n};\n\nexport const WavRenderer = {\n  /**\n   * Renders a point-in-time snapshot of an audio sample, usually frequency values\n   * @param canvas\n   * @param ctx\n   * @param data\n   * @param color\n   * @param pointCount number of bars to render\n   * @param barWidth width of bars in px\n   * @param barSpacing spacing between bars in px\n   * @param center vertically center the bars\n   */\n  drawBars: (\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D,\n    data: Float32Array,\n    color: string,\n    pointCount: number = 0,\n    barWidth: number = 0,\n    barSpacing: number = 0,\n    center: boolean = false\n  ) => {\n    pointCount = Math.floor(\n      Math.min(\n        pointCount,\n        (canvas.width - barSpacing) / (Math.max(barWidth, 1) + barSpacing)\n      )\n    );\n    if (!pointCount) {\n      pointCount = Math.floor(\n        (canvas.width - barSpacing) / (Math.max(barWidth, 1) + barSpacing)\n      );\n    }\n    if (!barWidth) {\n      barWidth = (canvas.width - barSpacing) / pointCount - barSpacing;\n    }\n    const points = normalizeArray(data, pointCount, true);\n    for (let i = 0; i < pointCount; i++) {\n      const amplitude = Math.abs(points[i]);\n      const height = Math.max(1, amplitude * canvas.height);\n      const x = barSpacing + i * (barWidth + barSpacing);\n      const y = center ? (canvas.height - height) / 2 : canvas.height - height;\n      ctx.fillStyle = color;\n      ctx.fillRect(x, y, barWidth, height);\n    }\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}