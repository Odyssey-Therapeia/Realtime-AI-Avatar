{"ast":null,"code":"import{useEffect,useRef,useCallback,useState}from'react';import{RealtimeClient}from'../lib/realtime-api-beta/index.js';import{WavRecorder,WavStreamPlayer}from'../lib/wavtools/index.js';import{instructions}from'../utils/conversation_config.js';import{WavRenderer}from'../utils/wav_renderer';import{X,Edit,Zap}from'react-feather';import{Button}from'../components/button/Button';import'./ConsolePage.scss';import{SimliClient}from'simli-client';// Import SimliClient\n/**\n * Change this if you want to connect to a local relay server!\n * This will require you to set OPENAI_API_KEY= in a .env file\n * You can run it with npm run relay, in parallel with npm start\n *\n * Simply switch the lines by commenting one and removing the other\n */// const USE_LOCAL_RELAY_SERVER_URL: string | undefined = 'http://localhost:8081';\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const USE_LOCAL_RELAY_SERVER_URL=undefined;/**\n * Type for all event logs\n */function resampleAudioData(inputData,inputSampleRate,outputSampleRate){const sampleRateRatio=inputSampleRate/outputSampleRate;const outputLength=Math.round(inputData.length/sampleRateRatio);const outputData=new Int16Array(outputLength);for(let i=0;i<outputLength;i++){const sourceIndex=i*sampleRateRatio;const lowerIndex=Math.floor(sourceIndex);const upperIndex=Math.min(lowerIndex+1,inputData.length-1);const interpolation=sourceIndex-lowerIndex;outputData[i]=(1-interpolation)*inputData[lowerIndex]+interpolation*inputData[upperIndex];}return outputData;}export function ConsolePage(){/**\n   * Ask user for API Key\n   * If we're using the local relay server, we don't need this\n   */const apiKey=USE_LOCAL_RELAY_SERVER_URL?'':localStorage.getItem('tmp::voice_api_key')||prompt('OpenAI API Key')||'';if(apiKey!==''){localStorage.setItem('tmp::voice_api_key',apiKey);}/**\n   * Instantiate:\n   * - WavRecorder (speech input)\n   * - WavStreamPlayer (speech output)\n   * - RealtimeClient (API client)\n   */const wavRecorderRef=useRef(new WavRecorder({sampleRate:24000}));const wavStreamPlayerRef=useRef(new WavStreamPlayer({sampleRate:24000}));const clientRef=useRef(new RealtimeClient(USE_LOCAL_RELAY_SERVER_URL?{url:USE_LOCAL_RELAY_SERVER_URL}:{apiKey:apiKey,dangerouslyAllowAPIKeyInBrowser:true}));// Simli refs\nconst videoRef=useRef(null);const audioRef=useRef(null);const simliClientRef=useRef(null);const simliAudioBufferRef=useRef([]);/**\n   * References for\n   * - Rendering audio visualization (canvas)\n   * - Autoscrolling event logs\n   */const clientCanvasRef=useRef(null);const serverCanvasRef=useRef(null);const eventsScrollHeightRef=useRef(0);const eventsScrollRef=useRef(null);const startTimeRef=useRef(new Date().toISOString());/**\n   * All of our variables for displaying application state\n   * - items are all conversation items (dialog)\n   * - realtimeEvents are event logs, which can be expanded\n   * - memoryKv is for set_memory() function\n   */const[items,setItems]=useState([]);const[realtimeEvents,setRealtimeEvents]=useState([]);const[expandedEvents,setExpandedEvents]=useState({});const[isConnected,setIsConnected]=useState(false);const[canPushToTalk,setCanPushToTalk]=useState(true);const[isRecording,setIsRecording]=useState(false);const[memoryKv,setMemoryKv]=useState({});/**\n   * Utility for formatting the timing of logs\n   */const formatTime=useCallback(timestamp=>{const startTime=startTimeRef.current;const t0=new Date(startTime).valueOf();const t1=new Date(timestamp).valueOf();const delta=t1-t0;const hs=Math.floor(delta/10)%100;const s=Math.floor(delta/1000)%60;const m=Math.floor(delta/60000)%60;const pad=n=>{let s=n+'';while(s.length<2){s='0'+s;}return s;};return`${pad(m)}:${pad(s)}.${pad(hs)}`;},[]);/**\n   * When you click the API key\n   */const resetAPIKey=useCallback(()=>{const apiKey=prompt('OpenAI API Key');if(apiKey!==null){localStorage.clear();localStorage.setItem('tmp::voice_api_key',apiKey);window.location.reload();}},[]);const isSimliDataChannelOpen=()=>{if(!simliClientRef.current)return false;// Access internal properties (may vary depending on SimliClient implementation)\nconst pc=simliClientRef.current.pc;const dc=simliClientRef.current.dc;return pc!==null&&pc.iceConnectionState==='connected'&&dc!==null&&dc.readyState==='open';};/**\n   * Connect to conversation:\n   * WavRecorder takes speech input, WavStreamPlayer output, client is API client\n   */const connectConversation=useCallback(async()=>{const client=clientRef.current;const wavRecorder=wavRecorderRef.current;const wavStreamPlayer=wavStreamPlayerRef.current;// Define audio constraints for noise suppression, echo cancellation, and auto gain control\nconst constraints={audio:{echoCancellation:true,noiseSuppression:true,autoGainControl:true}};// Set state variables\nstartTimeRef.current=new Date().toISOString();setIsConnected(true);setRealtimeEvents([]);setItems(client.conversation.getItems());// Start Simli WebRTC connection\nif(simliClientRef.current){simliClientRef.current.start();// Send empty audio data to Simli\nconst audioData=new Uint8Array(6000).fill(0);simliClientRef.current.sendAudioData(audioData);console.log('Sent initial empty audio data to Simli');}// Now connect to OpenAI's realtime API\nawait client.connect();// Connect to microphone\nawait wavRecorder.begin();// Connect to audio output\nawait wavStreamPlayer.connect();if(client.getTurnDetectionType()==='server_vad'){await wavRecorder.record(data=>client.appendInputAudio(data.mono));}},[]);const changeVoiceType=async()=>{const client=clientRef.current;/**\n    // Access the voice setting from the environment variable\n    */// Define allowed voices\nconst allowedVoices=['shimmer','alloy','echo'];// Get voice from environment variable (defaults to 'shimmer' if not set)\nconst voice=process.env.REACT_APP_VOICE||'shimmer';// Validate that the voice is one of the allowed options\nconst validVoice=allowedVoices.includes(voice)?voice:'shimmer';// Default to 'shimmer' if invalid\nclient.updateSession({voice:validVoice});};// Use useEffect to call the function on component mount\nuseEffect(()=>{changeVoiceType();},[]);/**\n   * Disconnect and reset conversation state\n   */const disconnectConversation=useCallback(async()=>{setIsConnected(false);setRealtimeEvents([]);setItems([]);setMemoryKv({});const client=clientRef.current;client.disconnect();const wavRecorder=wavRecorderRef.current;await wavRecorder.end();const wavStreamPlayer=wavStreamPlayerRef.current;await wavStreamPlayer.interrupt();// Close Simli connection\nif(simliClientRef.current){simliClientRef.current.close();}},[]);const deleteConversationItem=useCallback(async id=>{const client=clientRef.current;client.deleteItem(id);},[]);/**\n   * In push-to-talk mode, start recording\n   * .appendInputAudio() for each sample\n   */const startRecording=async()=>{setIsRecording(true);const client=clientRef.current;const wavRecorder=wavRecorderRef.current;const wavStreamPlayer=wavStreamPlayerRef.current;const trackSampleOffset=await wavStreamPlayer.interrupt();if(trackSampleOffset!==null&&trackSampleOffset!==void 0&&trackSampleOffset.trackId){const{trackId,offset}=trackSampleOffset;await client.cancelResponse(trackId,offset);}await wavRecorder.record(data=>client.appendInputAudio(data.mono));};/**\n   * In push-to-talk mode, stop recording\n   */const stopRecording=async()=>{setIsRecording(false);const client=clientRef.current;const wavRecorder=wavRecorderRef.current;await wavRecorder.pause();client.createResponse();};/**\n   * Switch between Manual <> VAD mode for communication\n   \n  const changeTurnEndType = async (value: string) => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\n      await wavRecorder.pause();\n    }\n    client.updateSession({\n      turn_detection: value === 'none' ? null : { type: 'server_vad' },\n    });\n    if (value === 'server_vad' && client.isConnected()) {\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n    }\n    setCanPushToTalk(value === 'none');\n  };\n\n  /*****\n   * Auto-scroll the event logs\n   */useEffect(()=>{if(eventsScrollRef.current){const eventsEl=eventsScrollRef.current;const scrollHeight=eventsEl.scrollHeight;// Only scroll if height has just changed\nif(scrollHeight!==eventsScrollHeightRef.current){eventsEl.scrollTop=scrollHeight;eventsScrollHeightRef.current=scrollHeight;}}},[realtimeEvents]);/**\n   * Auto-scroll the conversation logs\n   */useEffect(()=>{const conversationEls=[].slice.call(document.body.querySelectorAll('[data-conversation-content]'));for(const el of conversationEls){const conversationEl=el;conversationEl.scrollTop=conversationEl.scrollHeight;}},[items]);/**\n   * Set up render loops for the visualization canvas\n   */useEffect(()=>{let isLoaded=true;const wavRecorder=wavRecorderRef.current;const clientCanvas=clientCanvasRef.current;let clientCtx=null;const wavStreamPlayer=wavStreamPlayerRef.current;const serverCanvas=serverCanvasRef.current;let serverCtx=null;const render=()=>{if(isLoaded){if(clientCanvas){if(!clientCanvas.width||!clientCanvas.height){clientCanvas.width=clientCanvas.offsetWidth;clientCanvas.height=clientCanvas.offsetHeight;}clientCtx=clientCtx||clientCanvas.getContext('2d');if(clientCtx){clientCtx.clearRect(0,0,clientCanvas.width,clientCanvas.height);const result=wavRecorder.recording?wavRecorder.getFrequencies('voice'):{values:new Float32Array([0])};WavRenderer.drawBars(clientCanvas,clientCtx,result.values,'#0099ff',10,0,8);}}if(serverCanvas){if(!serverCanvas.width||!serverCanvas.height){serverCanvas.width=serverCanvas.offsetWidth;serverCanvas.height=serverCanvas.offsetHeight;}serverCtx=serverCtx||serverCanvas.getContext('2d');if(serverCtx){serverCtx.clearRect(0,0,serverCanvas.width,serverCanvas.height);const result=wavStreamPlayer.analyser?wavStreamPlayer.getFrequencies('voice'):{values:new Float32Array([0])};WavRenderer.drawBars(serverCanvas,serverCtx,result.values,'#009900',10,0,8);}}window.requestAnimationFrame(render);}};render();return()=>{isLoaded=false;};},[]);/**************************************************************************************\n   * Core RealtimeClient and audio capture setup\n   * Set all of our instructions, tools, events, and more\n   */useEffect(()=>{// Get refs\nconst wavStreamPlayer=wavStreamPlayerRef.current;const client=clientRef.current;// Initialize SimliClient\nif(videoRef.current&&audioRef.current){const simliApiKey=process.env.REACT_APP_SIMLI_API_KEY;const simliFaceID=process.env.REACT_APP_SIMLI_FACE_ID;if(!simliApiKey||!simliFaceID){console.error('Simli API key or Face ID is not defined');}else{const SimliConfig={apiKey:simliApiKey,faceID:simliFaceID,handleSilence:true,videoRef:videoRef,audioRef:audioRef};simliClientRef.current=new SimliClient();simliClientRef.current.Initialize(SimliConfig);console.log('Simli Client initialized');}}// Set instructions\nclient.updateSession({instructions:instructions});// Set transcription, otherwise we don't get user transcriptions back\nclient.updateSession({input_audio_transcription:{model:'whisper-1'}});// handle realtime events from client + server for event logging\nclient.on('realtime.event',realtimeEvent=>{setRealtimeEvents(realtimeEvents=>{const lastEvent=realtimeEvents[realtimeEvents.length-1];if((lastEvent===null||lastEvent===void 0?void 0:lastEvent.event.type)===realtimeEvent.event.type){lastEvent.count=(lastEvent.count||0)+1;return realtimeEvents.slice(0,-1).concat(lastEvent);}else{return realtimeEvents.concat(realtimeEvent);}});});client.on('error',event=>console.error(event));client.on('conversation.interrupted',async()=>{// Stop sending further audio data to Simli\nsimliAudioBufferRef.current=[];});client.on('conversation.updated',async _ref=>{var _item$formatted$audio;let{item,delta}=_ref;const items=client.conversation.getItems();if(delta!==null&&delta!==void 0&&delta.audio){if(simliClientRef.current){const audioData=new Int16Array(delta.audio);const resampledAudioData=resampleAudioData(audioData,24000,16000);if(isSimliDataChannelOpen()){// Send buffered audio first\nif(simliAudioBufferRef.current.length>0){simliAudioBufferRef.current.forEach(bufferedData=>{simliClientRef.current.sendAudioData(bufferedData);});simliAudioBufferRef.current=[];}// Send current resampled audio data\nconst resampledAudioDataUint8=new Uint8Array(resampledAudioData.buffer);simliClientRef.current.sendAudioData(resampledAudioDataUint8);}else{// Buffer the resampled audio data\nconst resampledAudioDataUint8=new Uint8Array(resampledAudioData.buffer);simliAudioBufferRef.current.push(resampledAudioDataUint8);console.warn('Data channel is not open yet, buffering audio data');}}}if(item.status==='completed'&&(_item$formatted$audio=item.formatted.audio)!==null&&_item$formatted$audio!==void 0&&_item$formatted$audio.length){const wavFile=await WavRecorder.decode(item.formatted.audio,24000,24000);item.formatted.file=wavFile;}setItems(items);});setItems(client.conversation.getItems());return()=>{// cleanup; resets to defaults\nclient.reset();// Close SimliClient on unmount\nif(simliClientRef.current){simliClientRef.current.close();}};},[]);/***************************************************************************************\n * Render the application\n */return/*#__PURE__*/_jsxs(\"div\",{\"data-component\":\"ConsolePage\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"content-top\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"content-title\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"/openai-logomark.svg\"}),/*#__PURE__*/_jsx(\"span\",{children:\"realtime console\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"content-api-key\",children:!USE_LOCAL_RELAY_SERVER_URL&&/*#__PURE__*/_jsx(Button,{icon:Edit,iconPosition:\"end\",buttonStyle:\"flush\",label:`api key: ${apiKey.slice(0,3)}...`,onClick:()=>resetAPIKey()})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"content-main\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"content-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"content-avatar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"content-block-title\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"content-avatar-body\",children:[/*#__PURE__*/_jsx(\"video\",{ref:videoRef,autoPlay:true,playsInline:true,muted:true,style:{width:'100%',height:'auto'}}),/*#__PURE__*/_jsx(\"audio\",{ref:audioRef,autoPlay:true})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"content-block conversation\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"content-block-title\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"content-block-body\",\"data-conversation-content\":true,children:[/*#__PURE__*/_jsx(\"div\",{className:\"center-text\",children:!items.length&&\"...let's get connected!\"}),items.map((conversationItem,i)=>{var _conversationItem$for;return/*#__PURE__*/_jsxs(\"div\",{className:\"conversation-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`speaker ${conversationItem.role||''}`,children:[/*#__PURE__*/_jsx(\"div\",{children:(conversationItem.role||conversationItem.type).replaceAll('_',' ')}),/*#__PURE__*/_jsx(\"div\",{className:\"close\",onClick:()=>deleteConversationItem(conversationItem.id),children:/*#__PURE__*/_jsx(X,{})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"speaker-content\",children:[conversationItem.type==='function_call_output'&&/*#__PURE__*/_jsx(\"div\",{children:conversationItem.formatted.output}),!!conversationItem.formatted.tool&&/*#__PURE__*/_jsxs(\"div\",{children:[conversationItem.formatted.tool.name,\"(\",conversationItem.formatted.tool.arguments,\")\"]}),!conversationItem.formatted.tool&&conversationItem.role==='user'&&/*#__PURE__*/_jsx(\"div\",{children:conversationItem.formatted.transcript||((_conversationItem$for=conversationItem.formatted.audio)!==null&&_conversationItem$for!==void 0&&_conversationItem$for.length?'(awaiting transcript)':conversationItem.formatted.text||'(item sent)')}),!conversationItem.formatted.tool&&conversationItem.role==='assistant'&&/*#__PURE__*/_jsx(\"div\",{children:conversationItem.formatted.transcript||conversationItem.formatted.text||'(truncated)'}),conversationItem.formatted.file&&/*#__PURE__*/_jsx(\"audio\",{src:conversationItem.formatted.file.url,controls:true})]})]},conversationItem.id);})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"content-actions\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsx(Button,{label:isRecording?'Release to Send':'Push to Talk',buttonStyle:isRecording?'alert':'regular',disabled:!isConnected||!canPushToTalk,onMouseDown:startRecording,onMouseUp:stopRecording}),/*#__PURE__*/_jsx(Button,{label:isConnected?'Disconnect':'Connect',iconPosition:isConnected?'end':'start',icon:isConnected?X:Zap,buttonStyle:isConnected?'regular':'action',onClick:isConnected?disconnectConversation:connectConversation})]})})]})})]});}","map":{"version":3,"names":["useEffect","useRef","useCallback","useState","RealtimeClient","WavRecorder","WavStreamPlayer","instructions","WavRenderer","X","Edit","Zap","Button","SimliClient","jsx","_jsx","jsxs","_jsxs","USE_LOCAL_RELAY_SERVER_URL","undefined","resampleAudioData","inputData","inputSampleRate","outputSampleRate","sampleRateRatio","outputLength","Math","round","length","outputData","Int16Array","i","sourceIndex","lowerIndex","floor","upperIndex","min","interpolation","ConsolePage","apiKey","localStorage","getItem","prompt","setItem","wavRecorderRef","sampleRate","wavStreamPlayerRef","clientRef","url","dangerouslyAllowAPIKeyInBrowser","videoRef","audioRef","simliClientRef","simliAudioBufferRef","clientCanvasRef","serverCanvasRef","eventsScrollHeightRef","eventsScrollRef","startTimeRef","Date","toISOString","items","setItems","realtimeEvents","setRealtimeEvents","expandedEvents","setExpandedEvents","isConnected","setIsConnected","canPushToTalk","setCanPushToTalk","isRecording","setIsRecording","memoryKv","setMemoryKv","formatTime","timestamp","startTime","current","t0","valueOf","t1","delta","hs","s","m","pad","n","resetAPIKey","clear","window","location","reload","isSimliDataChannelOpen","pc","dc","iceConnectionState","readyState","connectConversation","client","wavRecorder","wavStreamPlayer","constraints","audio","echoCancellation","noiseSuppression","autoGainControl","conversation","getItems","start","audioData","Uint8Array","fill","sendAudioData","console","log","connect","begin","getTurnDetectionType","record","data","appendInputAudio","mono","changeVoiceType","allowedVoices","voice","process","env","REACT_APP_VOICE","validVoice","includes","updateSession","disconnectConversation","disconnect","end","interrupt","close","deleteConversationItem","id","deleteItem","startRecording","trackSampleOffset","trackId","offset","cancelResponse","stopRecording","pause","createResponse","eventsEl","scrollHeight","scrollTop","conversationEls","slice","call","document","body","querySelectorAll","el","conversationEl","isLoaded","clientCanvas","clientCtx","serverCanvas","serverCtx","render","width","height","offsetWidth","offsetHeight","getContext","clearRect","result","recording","getFrequencies","values","Float32Array","drawBars","analyser","requestAnimationFrame","simliApiKey","REACT_APP_SIMLI_API_KEY","simliFaceID","REACT_APP_SIMLI_FACE_ID","error","SimliConfig","faceID","handleSilence","Initialize","input_audio_transcription","model","on","realtimeEvent","lastEvent","event","type","count","concat","_ref","_item$formatted$audio","item","resampledAudioData","forEach","bufferedData","resampledAudioDataUint8","buffer","push","warn","status","formatted","wavFile","decode","file","reset","children","className","src","icon","iconPosition","buttonStyle","label","onClick","ref","autoPlay","playsInline","muted","style","map","conversationItem","_conversationItem$for","role","replaceAll","output","tool","name","arguments","transcript","text","controls","disabled","onMouseDown","onMouseUp"],"sources":["/Users/johnpaulreju/git_dashboard/simli/simli-openai-realtime/src/pages/ConsolePage.tsx"],"sourcesContent":["import { useEffect, useRef, useCallback, useState } from 'react';\nimport { RealtimeClient } from '../lib/realtime-api-beta/index.js';\nimport { ItemType } from '../lib/realtime-api-beta/dist/lib/client.js';\nimport { WavRecorder, WavStreamPlayer } from '../lib/wavtools/index.js';\nimport { instructions } from '../utils/conversation_config.js';\nimport { WavRenderer } from '../utils/wav_renderer';\nimport { X, Edit, Zap, ArrowUp, ArrowDown } from 'react-feather';\nimport { Button } from '../components/button/Button';\nimport { Toggle } from '../components/toggle/Toggle';\nimport './ConsolePage.scss';\nimport { SimliClient } from 'simli-client'; // Import SimliClient\n\n/**\n * Change this if you want to connect to a local relay server!\n * This will require you to set OPENAI_API_KEY= in a .env file\n * You can run it with npm run relay, in parallel with npm start\n *\n * Simply switch the lines by commenting one and removing the other\n */\n// const USE_LOCAL_RELAY_SERVER_URL: string | undefined = 'http://localhost:8081';\nconst USE_LOCAL_RELAY_SERVER_URL: string | undefined = undefined;\n\n/**\n * Type for all event logs\n */\ninterface RealtimeEvent {\n  time: string;\n  source: 'client' | 'server';\n  count?: number;\n  event: { [key: string]: any };\n}\n\nfunction resampleAudioData(\n  inputData: Int16Array,\n  inputSampleRate: number,\n  outputSampleRate: number\n): Int16Array {\n  const sampleRateRatio = inputSampleRate / outputSampleRate;\n  const outputLength = Math.round(inputData.length / sampleRateRatio);\n  const outputData = new Int16Array(outputLength);\n\n  for (let i = 0; i < outputLength; i++) {\n    const sourceIndex = i * sampleRateRatio;\n    const lowerIndex = Math.floor(sourceIndex);\n    const upperIndex = Math.min(lowerIndex + 1, inputData.length - 1);\n    const interpolation = sourceIndex - lowerIndex;\n    outputData[i] =\n      (1 - interpolation) * inputData[lowerIndex] +\n      interpolation * inputData[upperIndex];\n  }\n\n  return outputData;\n}\n\n\nexport function ConsolePage() {\n  /**\n   * Ask user for API Key\n   * If we're using the local relay server, we don't need this\n   */\n  const apiKey = USE_LOCAL_RELAY_SERVER_URL\n    ? ''\n    : localStorage.getItem('tmp::voice_api_key') ||\n      prompt('OpenAI API Key') ||\n      '';\n  if (apiKey !== '') {\n    localStorage.setItem('tmp::voice_api_key', apiKey);\n  }\n\n  /**\n   * Instantiate:\n   * - WavRecorder (speech input)\n   * - WavStreamPlayer (speech output)\n   * - RealtimeClient (API client)\n   */\n  const wavRecorderRef = useRef<WavRecorder>(\n    new WavRecorder({ sampleRate: 24000 })\n  );\n  const wavStreamPlayerRef = useRef<WavStreamPlayer>(\n    new WavStreamPlayer({ sampleRate: 24000 })\n  );\n  const clientRef = useRef<RealtimeClient>(\n    new RealtimeClient(\n      USE_LOCAL_RELAY_SERVER_URL\n        ? { url: USE_LOCAL_RELAY_SERVER_URL }\n        : {\n            apiKey: apiKey,\n            dangerouslyAllowAPIKeyInBrowser: true,\n          }\n    )\n  );\n\n  // Simli refs\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const simliClientRef = useRef<SimliClient | null>(null);\n  const simliAudioBufferRef = useRef<Uint8Array[]>([]);\n\n  /**\n   * References for\n   * - Rendering audio visualization (canvas)\n   * - Autoscrolling event logs\n   */\n  const clientCanvasRef = useRef<HTMLCanvasElement>(null);\n  const serverCanvasRef = useRef<HTMLCanvasElement>(null);\n  const eventsScrollHeightRef = useRef(0);\n  const eventsScrollRef = useRef<HTMLDivElement>(null);\n  const startTimeRef = useRef<string>(new Date().toISOString());\n\n  /**\n   * All of our variables for displaying application state\n   * - items are all conversation items (dialog)\n   * - realtimeEvents are event logs, which can be expanded\n   * - memoryKv is for set_memory() function\n   */\n  const [items, setItems] = useState<ItemType[]>([]);\n  const [realtimeEvents, setRealtimeEvents] = useState<RealtimeEvent[]>([]);\n  const [expandedEvents, setExpandedEvents] = useState<{\n    [key: string]: boolean;\n  }>({});\n  const [isConnected, setIsConnected] = useState(false);\n  const [canPushToTalk, setCanPushToTalk] = useState(true);\n  const [isRecording, setIsRecording] = useState(false);\n  const [memoryKv, setMemoryKv] = useState<{ [key: string]: any }>({});\n\n  /**\n   * Utility for formatting the timing of logs\n   */\n  const formatTime = useCallback((timestamp: string) => {\n    const startTime = startTimeRef.current;\n    const t0 = new Date(startTime).valueOf();\n    const t1 = new Date(timestamp).valueOf();\n    const delta = t1 - t0;\n    const hs = Math.floor(delta / 10) % 100;\n    const s = Math.floor(delta / 1000) % 60;\n    const m = Math.floor(delta / 60_000) % 60;\n    const pad = (n: number) => {\n      let s = n + '';\n      while (s.length < 2) {\n        s = '0' + s;\n      }\n      return s;\n    };\n    return `${pad(m)}:${pad(s)}.${pad(hs)}`;\n  }, []);\n\n  /**\n   * When you click the API key\n   */\n  const resetAPIKey = useCallback(() => {\n    const apiKey = prompt('OpenAI API Key');\n    if (apiKey !== null) {\n      localStorage.clear();\n      localStorage.setItem('tmp::voice_api_key', apiKey);\n      window.location.reload();\n    }\n  }, []);\n\n  const isSimliDataChannelOpen = () => {\n    if (!simliClientRef.current) return false;\n  \n    // Access internal properties (may vary depending on SimliClient implementation)\n    const pc = (simliClientRef.current as any).pc as RTCPeerConnection | null;\n    const dc = (simliClientRef.current as any).dc as RTCDataChannel | null;\n  \n    return (\n      pc !== null &&\n      pc.iceConnectionState === 'connected' &&\n      dc !== null &&\n      dc.readyState === 'open'\n    );\n  };\n  \n  /**\n   * Connect to conversation:\n   * WavRecorder takes speech input, WavStreamPlayer output, client is API client\n   */\n  const connectConversation = useCallback(async () => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n\n     // Define audio constraints for noise suppression, echo cancellation, and auto gain control\n    const constraints = {\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n        autoGainControl: true,\n      },\n    };\n\n    // Set state variables\n    startTimeRef.current = new Date().toISOString();\n    setIsConnected(true);\n    setRealtimeEvents([]);\n    setItems(client.conversation.getItems());\n  \n    // Start Simli WebRTC connection\n    if (simliClientRef.current) {\n      simliClientRef.current.start();\n  \n      // Send empty audio data to Simli\n      const audioData = new Uint8Array(6000).fill(0);\n      simliClientRef.current.sendAudioData(audioData);\n      console.log('Sent initial empty audio data to Simli');\n    }\n  \n    // Now connect to OpenAI's realtime API\n    await client.connect();\n  \n    // Connect to microphone\n    await wavRecorder.begin();\n  \n    // Connect to audio output\n    await wavStreamPlayer.connect();\n    \n    if (client.getTurnDetectionType() === 'server_vad') {\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n    }\n  }, []);\n  \n  const changeVoiceType = async () => {\n    const client = clientRef.current;\n    \n    /**\n    // Access the voice setting from the environment variable\n    */\n    // Define allowed voices\n    const allowedVoices: Array<'shimmer' | 'alloy' | 'echo'> = ['shimmer', 'alloy', 'echo'];\n\n    // Get voice from environment variable (defaults to 'shimmer' if not set)\n    const voice = process.env.REACT_APP_VOICE || 'shimmer';\n\n    // Validate that the voice is one of the allowed options\n    const validVoice = allowedVoices.includes(voice as 'shimmer' | 'alloy' | 'echo')\n      ? (voice as 'shimmer' | 'alloy' | 'echo') \n      : 'shimmer';  // Default to 'shimmer' if invalid\n\n    client.updateSession({\n      voice: validVoice,\n    });\n  };\n\n  // Use useEffect to call the function on component mount\n  useEffect(() => {\n    changeVoiceType();\n  }, []);\n\n\n  /**\n   * Disconnect and reset conversation state\n   */\n  const disconnectConversation = useCallback(async () => {\n    setIsConnected(false);\n    setRealtimeEvents([]);\n    setItems([]);\n    setMemoryKv({});\n\n    const client = clientRef.current;\n    client.disconnect();\n\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.end();\n\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    await wavStreamPlayer.interrupt();\n\n    // Close Simli connection\n    if (simliClientRef.current) {\n      simliClientRef.current.close();\n    }\n  }, []);\n\n  const deleteConversationItem = useCallback(async (id: string) => {\n    const client = clientRef.current;\n    client.deleteItem(id);\n  }, []);\n\n  /**\n   * In push-to-talk mode, start recording\n   * .appendInputAudio() for each sample\n   */\n  const startRecording = async () => {\n    setIsRecording(true);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const trackSampleOffset = await wavStreamPlayer.interrupt();\n    if (trackSampleOffset?.trackId) {\n      const { trackId, offset } = trackSampleOffset;\n      await client.cancelResponse(trackId, offset);\n    }\n    await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n  };\n\n  /**\n   * In push-to-talk mode, stop recording\n   */\n  const stopRecording = async () => {\n    setIsRecording(false);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.pause();\n    client.createResponse();\n  };\n\n  /**\n   * Switch between Manual <> VAD mode for communication\n   \n  const changeTurnEndType = async (value: string) => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\n      await wavRecorder.pause();\n    }\n    client.updateSession({\n      turn_detection: value === 'none' ? null : { type: 'server_vad' },\n    });\n    if (value === 'server_vad' && client.isConnected()) {\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n    }\n    setCanPushToTalk(value === 'none');\n  };\n\n  /*****\n   * Auto-scroll the event logs\n   */\n  useEffect(() => {\n    if (eventsScrollRef.current) {\n      const eventsEl = eventsScrollRef.current;\n      const scrollHeight = eventsEl.scrollHeight;\n      // Only scroll if height has just changed\n      if (scrollHeight !== eventsScrollHeightRef.current) {\n        eventsEl.scrollTop = scrollHeight;\n        eventsScrollHeightRef.current = scrollHeight;\n      }\n    }\n  }, [realtimeEvents]);\n\n  /**\n   * Auto-scroll the conversation logs\n   */\n  useEffect(() => {\n    const conversationEls = [].slice.call(\n      document.body.querySelectorAll('[data-conversation-content]')\n    );\n    for (const el of conversationEls) {\n      const conversationEl = el as HTMLDivElement;\n      conversationEl.scrollTop = conversationEl.scrollHeight;\n    }\n  }, [items]);\n\n  /**\n   * Set up render loops for the visualization canvas\n   */\n  useEffect(() => {\n    let isLoaded = true;\n\n    const wavRecorder = wavRecorderRef.current;\n    const clientCanvas = clientCanvasRef.current;\n    let clientCtx: CanvasRenderingContext2D | null = null;\n\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const serverCanvas = serverCanvasRef.current;\n    let serverCtx: CanvasRenderingContext2D | null = null;\n\n    const render = () => {\n      if (isLoaded) {\n        if (clientCanvas) {\n          if (!clientCanvas.width || !clientCanvas.height) {\n            clientCanvas.width = clientCanvas.offsetWidth;\n            clientCanvas.height = clientCanvas.offsetHeight;\n          }\n          clientCtx = clientCtx || clientCanvas.getContext('2d');\n          if (clientCtx) {\n            clientCtx.clearRect(0, 0, clientCanvas.width, clientCanvas.height);\n            const result = wavRecorder.recording\n              ? wavRecorder.getFrequencies('voice')\n              : { values: new Float32Array([0]) };\n            WavRenderer.drawBars(\n              clientCanvas,\n              clientCtx,\n              result.values,\n              '#0099ff',\n              10,\n              0,\n              8\n            );\n          }\n        }\n        if (serverCanvas) {\n          if (!serverCanvas.width || !serverCanvas.height) {\n            serverCanvas.width = serverCanvas.offsetWidth;\n            serverCanvas.height = serverCanvas.offsetHeight;\n          }\n          serverCtx = serverCtx || serverCanvas.getContext('2d');\n          if (serverCtx) {\n            serverCtx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);\n            const result = wavStreamPlayer.analyser\n              ? wavStreamPlayer.getFrequencies('voice')\n              : { values: new Float32Array([0]) };\n            WavRenderer.drawBars(\n              serverCanvas,\n              serverCtx,\n              result.values,\n              '#009900',\n              10,\n              0,\n              8\n            );\n          }\n        }\n        window.requestAnimationFrame(render);\n      }\n    };\n    render();\n\n    return () => {\n      isLoaded = false;\n    };\n  }, []);\n\n\n/**************************************************************************************\n   * Core RealtimeClient and audio capture setup\n   * Set all of our instructions, tools, events, and more\n   */\n  useEffect(() => {\n    // Get refs\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const client = clientRef.current;\n\n    // Initialize SimliClient\n    if (videoRef.current && audioRef.current) {\n      const simliApiKey = process.env.REACT_APP_SIMLI_API_KEY;\n      const simliFaceID = process.env.REACT_APP_SIMLI_FACE_ID;\n\n      if (!simliApiKey || !simliFaceID) {\n        console.error('Simli API key or Face ID is not defined');\n      } else {\n        const SimliConfig = {\n          apiKey: simliApiKey,\n          faceID: simliFaceID,\n          handleSilence: true,\n          videoRef: videoRef,\n          audioRef: audioRef,\n        };\n\n        simliClientRef.current = new SimliClient();\n        simliClientRef.current.Initialize(SimliConfig);\n        \n        console.log('Simli Client initialized');\n      }\n    }\n\n    // Set instructions\n    client.updateSession({ instructions: instructions });\n    // Set transcription, otherwise we don't get user transcriptions back\n    client.updateSession({ input_audio_transcription: { model: 'whisper-1' } });\n\n    // handle realtime events from client + server for event logging\n    client.on('realtime.event', (realtimeEvent: RealtimeEvent) => {\n      setRealtimeEvents((realtimeEvents) => {\n        const lastEvent = realtimeEvents[realtimeEvents.length - 1];\n        if (lastEvent?.event.type === realtimeEvent.event.type) {\n          lastEvent.count = (lastEvent.count || 0) + 1;\n          return realtimeEvents.slice(0, -1).concat(lastEvent);\n        } else {\n          return realtimeEvents.concat(realtimeEvent);\n        }\n      });\n    });\n    client.on('error', (event: any) => console.error(event));\n    client.on('conversation.interrupted', async () => {\n      // Stop sending further audio data to Simli\n      simliAudioBufferRef.current = [];\n\n    });\n    \n    client.on('conversation.updated', async ({ item, delta }: any) => {\n      const items = client.conversation.getItems();\n    \n      if (delta?.audio) {\n        if (simliClientRef.current) {\n          const audioData = new Int16Array(delta.audio);\n          const resampledAudioData = resampleAudioData(audioData, 24000, 16000);\n    \n          if (isSimliDataChannelOpen()) {\n            // Send buffered audio first\n            if (simliAudioBufferRef.current.length > 0) {\n              simliAudioBufferRef.current.forEach((bufferedData) => {\n                simliClientRef.current!.sendAudioData(bufferedData);\n              });\n              simliAudioBufferRef.current = [];\n            }\n            // Send current resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliClientRef.current.sendAudioData(resampledAudioDataUint8);\n          } else {\n            // Buffer the resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliAudioBufferRef.current.push(resampledAudioDataUint8);\n            console.warn('Data channel is not open yet, buffering audio data');\n          }\n        }\n      }\n    \n      if (item.status === 'completed' && item.formatted.audio?.length) {\n        const wavFile = await WavRecorder.decode(\n          item.formatted.audio,\n          24000,\n          24000\n        );\n        item.formatted.file = wavFile;\n      }\n      setItems(items);\n    });\n    \n    \n\n    setItems(client.conversation.getItems());\n\n    return () => {\n      // cleanup; resets to defaults\n      client.reset();\n\n      // Close SimliClient on unmount\n      if (simliClientRef.current) {\n        simliClientRef.current.close();\n      }\n    };\n  }, []);\n\n\n\n/***************************************************************************************\n * Render the application\n */\n  return (\n    <div data-component=\"ConsolePage\">\n      <div className=\"content-top\">\n        <div className=\"content-title\">\n          <img src=\"/openai-logomark.svg\" />\n          <span>realtime console</span>\n        </div>\n        <div className=\"content-api-key\">\n          {!USE_LOCAL_RELAY_SERVER_URL && (\n            <Button\n              icon={Edit}\n              iconPosition=\"end\"\n              buttonStyle=\"flush\"\n              label={`api key: ${apiKey.slice(0, 3)}...`}\n              onClick={() => resetAPIKey()}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"content-main\">\n        {/* Center Avatar Above Conversation */}\n        <div className=\"content-center\">\n          {/* Simli Avatar Display */}\n          <div className=\"content-avatar\">\n            <div className=\"content-block-title\"></div>\n            <div className=\"content-avatar-body\">\n              <video\n                ref={videoRef}\n                autoPlay\n                playsInline\n                muted\n                style={{ width: '100%', height: 'auto' }}\n              />\n              <audio ref={audioRef} autoPlay/>\n            </div>\n          </div>\n\n          {/* Conversation Block */}\n          <div className=\"content-block conversation\">\n            <div className=\"content-block-title\"></div>\n            <div className=\"content-block-body\" data-conversation-content>\n              <div className=\"center-text\">\n                {!items.length && \"...let's get connected!\"}\n              </div>\n              {items.map((conversationItem, i) => {\n                return (\n                  <div className=\"conversation-item\" key={conversationItem.id}>\n                    <div className={`speaker ${conversationItem.role || ''}`}>\n                      <div>\n                        {(\n                          conversationItem.role || conversationItem.type\n                        ).replaceAll('_', ' ')}\n                      </div>\n                      <div\n                        className=\"close\"\n                        onClick={() =>\n                          deleteConversationItem(conversationItem.id)\n                        }\n                      >\n                        <X />\n                      </div>\n                    </div>\n                    <div className=\"speaker-content\">\n                      {conversationItem.type === 'function_call_output' && (\n                        <div>{conversationItem.formatted.output}</div>\n                      )}\n                      {!!conversationItem.formatted.tool && (\n                        <div>\n                          {conversationItem.formatted.tool.name}(\n                          {conversationItem.formatted.tool.arguments})\n                        </div>\n                      )}\n                      {!conversationItem.formatted.tool &&\n                        conversationItem.role === 'user' && (\n                          <div>\n                            {conversationItem.formatted.transcript ||\n                              (conversationItem.formatted.audio?.length\n                                ? '(awaiting transcript)'\n                                : conversationItem.formatted.text ||\n                                  '(item sent)')}\n                          </div>\n                        )}\n                      {!conversationItem.formatted.tool &&\n                        conversationItem.role === 'assistant' && (\n                          <div>\n                            {conversationItem.formatted.transcript ||\n                              conversationItem.formatted.text ||\n                              '(truncated)'}\n                          </div>\n                        )}\n                      {conversationItem.formatted.file && (\n                        <audio\n                          src={conversationItem.formatted.file.url}\n                          controls\n                        />\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"content-actions\">\n            <div className=\"button-container\">\n              <Button\n                label={isRecording ? 'Release to Send' : 'Push to Talk'}\n                buttonStyle={isRecording ? 'alert' : 'regular'}\n                disabled={!isConnected || !canPushToTalk}\n                onMouseDown={startRecording}\n                onMouseUp={stopRecording}\n              />\n              <Button\n                label={isConnected ? 'Disconnect' : 'Connect'}\n                iconPosition={isConnected ? 'end' : 'start'}\n                icon={isConnected ? X : Zap}\n                buttonStyle={isConnected ? 'regular' : 'action'}\n                onClick={\n                  isConnected ? disconnectConversation : connectConversation\n                }\n              />\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}