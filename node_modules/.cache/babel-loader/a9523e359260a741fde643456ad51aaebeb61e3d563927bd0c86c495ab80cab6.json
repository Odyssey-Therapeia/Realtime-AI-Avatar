{"ast":null,"code":"const atob=globalThis.atob;const btoa=globalThis.btoa;/**\n * Basic utilities for the RealtimeAPI\n * @class\n */export class RealtimeUtils{/**\n   * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format\n   * @param {Float32Array} float32Array\n   * @returns {ArrayBuffer}\n   */static floatTo16BitPCM(float32Array){const buffer=new ArrayBuffer(float32Array.length*2);const view=new DataView(buffer);let offset=0;for(let i=0;i<float32Array.length;i++,offset+=2){let s=Math.max(-1,Math.min(1,float32Array[i]));view.setInt16(offset,s<0?s*0x8000:s*0x7fff,true);}return buffer;}/**\n   * Converts a base64 string to an ArrayBuffer\n   * @param {string} base64\n   * @returns {ArrayBuffer}\n   */static base64ToArrayBuffer(base64){const binaryString=atob(base64);const len=binaryString.length;const bytes=new Uint8Array(len);for(let i=0;i<len;i++){bytes[i]=binaryString.charCodeAt(i);}return bytes.buffer;}/**\n   * Converts an ArrayBuffer, Int16Array or Float32Array to a base64 string\n   * @param {ArrayBuffer|Int16Array|Float32Array} arrayBuffer\n   * @returns {string}\n   */static arrayBufferToBase64(arrayBuffer){if(arrayBuffer instanceof Float32Array){arrayBuffer=this.floatTo16BitPCM(arrayBuffer);}else if(arrayBuffer instanceof Int16Array){arrayBuffer=arrayBuffer.buffer;}let binary='';let bytes=new Uint8Array(arrayBuffer);const chunkSize=0x8000;// 32KB chunk size\nfor(let i=0;i<bytes.length;i+=chunkSize){let chunk=bytes.subarray(i,i+chunkSize);binary+=String.fromCharCode.apply(null,chunk);}return btoa(binary);}/**\n   * Merge two Int16Arrays from Int16Arrays or ArrayBuffers\n   * @param {ArrayBuffer|Int16Array} left\n   * @param {ArrayBuffer|Int16Array} right\n   * @returns {Int16Array}\n   */static mergeInt16Arrays(left,right){if(left instanceof ArrayBuffer){left=new Int16Array(left);}if(right instanceof ArrayBuffer){right=new Int16Array(right);}if(!(left instanceof Int16Array)||!(right instanceof Int16Array)){throw new Error(`Both items must be Int16Array`);}const newValues=new Int16Array(left.length+right.length);for(let i=0;i<left.length;i++){newValues[i]=left[i];}for(let j=0;j<right.length;j++){newValues[left.length+j]=right[j];}return newValues;}/**\n   * Generates an id to send with events and messages\n   * @param {string} prefix\n   * @param {number} [length]\n   * @returns {string}\n   */static generateId(prefix){let length=arguments.length>1&&arguments[1]!==undefined?arguments[1]:21;// base58; non-repeating chars\nconst chars='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';const str=Array(length-prefix.length).fill(0).map(_=>chars[Math.floor(Math.random()*chars.length)]).join('');return`${prefix}${str}`;}}","map":{"version":3,"names":["atob","globalThis","btoa","RealtimeUtils","floatTo16BitPCM","float32Array","buffer","ArrayBuffer","length","view","DataView","offset","i","s","Math","max","min","setInt16","base64ToArrayBuffer","base64","binaryString","len","bytes","Uint8Array","charCodeAt","arrayBufferToBase64","arrayBuffer","Float32Array","Int16Array","binary","chunkSize","chunk","subarray","String","fromCharCode","apply","mergeInt16Arrays","left","right","Error","newValues","j","generateId","prefix","arguments","undefined","chars","str","Array","fill","map","_","floor","random","join"],"sources":["/Users/johnpaulreju/git_dashboard/simli/simli-openai-realtime/src/lib/realtime-api-beta/lib/utils.js"],"sourcesContent":["const atob = globalThis.atob;\nconst btoa = globalThis.btoa;\n\n/**\n * Basic utilities for the RealtimeAPI\n * @class\n */\nexport class RealtimeUtils {\n  /**\n   * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format\n   * @param {Float32Array} float32Array\n   * @returns {ArrayBuffer}\n   */\n  static floatTo16BitPCM(float32Array) {\n    const buffer = new ArrayBuffer(float32Array.length * 2);\n    const view = new DataView(buffer);\n    let offset = 0;\n    for (let i = 0; i < float32Array.length; i++, offset += 2) {\n      let s = Math.max(-1, Math.min(1, float32Array[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  }\n\n  /**\n   * Converts a base64 string to an ArrayBuffer\n   * @param {string} base64\n   * @returns {ArrayBuffer}\n   */\n  static base64ToArrayBuffer(base64) {\n    const binaryString = atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  /**\n   * Converts an ArrayBuffer, Int16Array or Float32Array to a base64 string\n   * @param {ArrayBuffer|Int16Array|Float32Array} arrayBuffer\n   * @returns {string}\n   */\n  static arrayBufferToBase64(arrayBuffer) {\n    if (arrayBuffer instanceof Float32Array) {\n      arrayBuffer = this.floatTo16BitPCM(arrayBuffer);\n    } else if (arrayBuffer instanceof Int16Array) {\n      arrayBuffer = arrayBuffer.buffer;\n    }\n    let binary = '';\n    let bytes = new Uint8Array(arrayBuffer);\n    const chunkSize = 0x8000; // 32KB chunk size\n    for (let i = 0; i < bytes.length; i += chunkSize) {\n      let chunk = bytes.subarray(i, i + chunkSize);\n      binary += String.fromCharCode.apply(null, chunk);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Merge two Int16Arrays from Int16Arrays or ArrayBuffers\n   * @param {ArrayBuffer|Int16Array} left\n   * @param {ArrayBuffer|Int16Array} right\n   * @returns {Int16Array}\n   */\n  static mergeInt16Arrays(left, right) {\n    if (left instanceof ArrayBuffer) {\n      left = new Int16Array(left);\n    }\n    if (right instanceof ArrayBuffer) {\n      right = new Int16Array(right);\n    }\n    if (!(left instanceof Int16Array) || !(right instanceof Int16Array)) {\n      throw new Error(`Both items must be Int16Array`);\n    }\n    const newValues = new Int16Array(left.length + right.length);\n    for (let i = 0; i < left.length; i++) {\n      newValues[i] = left[i];\n    }\n    for (let j = 0; j < right.length; j++) {\n      newValues[left.length + j] = right[j];\n    }\n    return newValues;\n  }\n\n  /**\n   * Generates an id to send with events and messages\n   * @param {string} prefix\n   * @param {number} [length]\n   * @returns {string}\n   */\n  static generateId(prefix, length = 21) {\n    // base58; non-repeating chars\n    const chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    const str = Array(length - prefix.length)\n      .fill(0)\n      .map((_) => chars[Math.floor(Math.random() * chars.length)])\n      .join('');\n    return `${prefix}${str}`;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}