{"ast":null,"code":"var _jsxFileName = \"/Users/johnpaulreju/git_dashboard/simli/simli-openai-realtime/src/pages/ConsolePage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useCallback, useState } from 'react';\nimport { RealtimeClient } from '../lib/realtime-api-beta/index.js';\nimport { WavRecorder, WavStreamPlayer } from '../lib/wavtools/index.js';\nimport { instructions } from '../utils/conversation_config.js';\nimport { WavRenderer } from '../utils/wav_renderer';\nimport { X, Edit, Zap } from 'react-feather';\nimport { Button } from '../components/button/Button';\nimport './ConsolePage.scss';\nimport { SimliClient } from 'simli-client'; // Import SimliClient\n\n/**\n * Change this if you want to connect to a local relay server!\n * This will require you to set OPENAI_API_KEY= in a .env file\n * You can run it with npm run relay, in parallel with npm start\n *\n * Simply switch the lines by commenting one and removing the other\n */\n// const USE_LOCAL_RELAY_SERVER_URL: string | undefined = 'http://localhost:8081';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USE_LOCAL_RELAY_SERVER_URL = undefined;\n\n/**\n * Type for all event logs\n */\n\nfunction resampleAudioData(inputData, inputSampleRate, outputSampleRate) {\n  const sampleRateRatio = inputSampleRate / outputSampleRate;\n  const outputLength = Math.round(inputData.length / sampleRateRatio);\n  const outputData = new Int16Array(outputLength);\n  for (let i = 0; i < outputLength; i++) {\n    const sourceIndex = i * sampleRateRatio;\n    const lowerIndex = Math.floor(sourceIndex);\n    const upperIndex = Math.min(lowerIndex + 1, inputData.length - 1);\n    const interpolation = sourceIndex - lowerIndex;\n    outputData[i] = (1 - interpolation) * inputData[lowerIndex] + interpolation * inputData[upperIndex];\n  }\n  return outputData;\n}\nexport function ConsolePage() {\n  _s();\n  /**\n   * Ask user for API Key\n   * If we're using the local relay server, we don't need this\n   */\n  const apiKey = USE_LOCAL_RELAY_SERVER_URL ? '' : localStorage.getItem('tmp::voice_api_key') || prompt('OpenAI API Key') || '';\n  if (apiKey !== '') {\n    localStorage.setItem('tmp::voice_api_key', apiKey);\n  }\n\n  /**\n   * Instantiate:\n   * - WavRecorder (speech input)\n   * - WavStreamPlayer (speech output)\n   * - RealtimeClient (API client)\n   */\n  const wavRecorderRef = useRef(new WavRecorder({\n    sampleRate: 24000\n  }));\n  const wavStreamPlayerRef = useRef(new WavStreamPlayer({\n    sampleRate: 24000\n  }));\n  const clientRef = useRef(new RealtimeClient(USE_LOCAL_RELAY_SERVER_URL ? {\n    url: USE_LOCAL_RELAY_SERVER_URL\n  } : {\n    apiKey: apiKey,\n    dangerouslyAllowAPIKeyInBrowser: true\n  }));\n\n  // Simli refs\n  const videoRef = useRef(null);\n  const audioRef = useRef(null);\n  const simliClientRef = useRef(null);\n  const simliAudioBufferRef = useRef([]);\n\n  /**\n   * References for\n   * - Rendering audio visualization (canvas)\n   * - Autoscrolling event logs\n   */\n  const clientCanvasRef = useRef(null);\n  const serverCanvasRef = useRef(null);\n  const eventsScrollHeightRef = useRef(0);\n  const eventsScrollRef = useRef(null);\n  const startTimeRef = useRef(new Date().toISOString());\n\n  /**\n   * All of our variables for displaying application state\n   * - items are all conversation items (dialog)\n   * - realtimeEvents are event logs, which can be expanded\n   * - memoryKv is for set_memory() function\n   */\n  const [items, setItems] = useState([]);\n  const [realtimeEvents, setRealtimeEvents] = useState([]);\n  const [expandedEvents, setExpandedEvents] = useState({});\n  const [isConnected, setIsConnected] = useState(false);\n  const [canPushToTalk, setCanPushToTalk] = useState(true);\n  const [isRecording, setIsRecording] = useState(false);\n  const [memoryKv, setMemoryKv] = useState({});\n\n  /**\n   * Utility for formatting the timing of logs\n   */\n  const formatTime = useCallback(timestamp => {\n    const startTime = startTimeRef.current;\n    const t0 = new Date(startTime).valueOf();\n    const t1 = new Date(timestamp).valueOf();\n    const delta = t1 - t0;\n    const hs = Math.floor(delta / 10) % 100;\n    const s = Math.floor(delta / 1000) % 60;\n    const m = Math.floor(delta / 60000) % 60;\n    const pad = n => {\n      let s = n + '';\n      while (s.length < 2) {\n        s = '0' + s;\n      }\n      return s;\n    };\n    return `${pad(m)}:${pad(s)}.${pad(hs)}`;\n  }, []);\n\n  /**\n   * When you click the API key\n   */\n  const resetAPIKey = useCallback(() => {\n    const apiKey = prompt('OpenAI API Key');\n    if (apiKey !== null) {\n      localStorage.clear();\n      localStorage.setItem('tmp::voice_api_key', apiKey);\n      window.location.reload();\n    }\n  }, []);\n  const isSimliDataChannelOpen = () => {\n    if (!simliClientRef.current) return false;\n\n    // Access internal properties (may vary depending on SimliClient implementation)\n    const pc = simliClientRef.current.pc;\n    const dc = simliClientRef.current.dc;\n    return pc !== null && pc.iceConnectionState === 'connected' && dc !== null && dc.readyState === 'open';\n  };\n\n  /**\n   * Connect to conversation:\n   * WavRecorder takes speech input, WavStreamPlayer output, client is API client\n   */\n  const connectConversation = useCallback(async () => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n\n    // Define audio constraints for noise suppression, echo cancellation, and auto gain control\n    const constraints = {\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n        autoGainControl: true\n      }\n    };\n\n    // Set state variables\n    startTimeRef.current = new Date().toISOString();\n    setIsConnected(true);\n    setRealtimeEvents([]);\n    setItems(client.conversation.getItems());\n\n    // Start Simli WebRTC connection\n    if (simliClientRef.current) {\n      simliClientRef.current.start();\n\n      // Send empty audio data to Simli\n      const audioData = new Uint8Array(6000).fill(0);\n      simliClientRef.current.sendAudioData(audioData);\n      console.log('Sent initial empty audio data to Simli');\n    }\n\n    // Now connect to OpenAI's realtime API\n    await client.connect();\n\n    // Connect to microphone\n    await wavRecorder.begin();\n\n    // Connect to audio output\n    await wavStreamPlayer.connect();\n    if (client.getTurnDetectionType() === 'server_vad') {\n      await wavRecorder.record(data => client.appendInputAudio(data.mono));\n    }\n  }, []);\n  const changeVoiceType = async () => {\n    const client = clientRef.current;\n\n    /**\n    // Access the voice setting from the environment variable\n    */\n    // Define allowed voices\n    const allowedVoices = ['shimmer', 'alloy', 'echo'];\n\n    // Get voice from environment variable (defaults to 'shimmer' if not set)\n    const voice = process.env.REACT_APP_VOICE || 'shimmer';\n\n    // Validate that the voice is one of the allowed options\n    const validVoice = allowedVoices.includes(voice) ? voice : 'shimmer'; // Default to 'shimmer' if invalid\n\n    client.updateSession({\n      voice: validVoice\n    });\n  };\n\n  // Use useEffect to call the function on component mount\n  useEffect(() => {\n    changeVoiceType();\n  }, []);\n\n  /**\n   * Disconnect and reset conversation state\n   */\n  // const disconnectConversation = useCallback(async () => {\n  //   setIsConnected(false);\n  //   setRealtimeEvents([]);\n  //   setItems([]);\n  //   setMemoryKv({});\n\n  //   const client = clientRef.current;\n  //   client.disconnect();\n\n  //   const wavRecorder = wavRecorderRef.current;\n  //   await wavRecorder.end();\n\n  //   const wavStreamPlayer = wavStreamPlayerRef.current;\n  //   await wavStreamPlayer.interrupt();\n\n  //   // Close Simli connection\n  //   if (simliClientRef.current) {\n  //     simliClientRef.current.close();\n  //   }\n  // }, []);\n  const disconnectConversation = useCallback(async () => {\n    setIsConnected(false);\n    setRealtimeEvents([]);\n    setItems([]);\n    setMemoryKv({});\n    const client = clientRef.current;\n    client.disconnect();\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.end(); // End the recording session properly\n\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    await wavStreamPlayer.interrupt();\n    if (simliClientRef.current) {\n      simliClientRef.current.close();\n    }\n  }, []);\n  const deleteConversationItem = useCallback(async id => {\n    const client = clientRef.current;\n    client.deleteItem(id);\n  }, []);\n\n  /**\n   * In push-to-talk mode, start recording\n   * .appendInputAudio() for each sample\n   */\n  const startRecording = async () => {\n    setIsRecording(true);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const trackSampleOffset = await wavStreamPlayer.interrupt();\n    console.log(\"recording or not\", wavRecorder.recording);\n    if (trackSampleOffset !== null && trackSampleOffset !== void 0 && trackSampleOffset.trackId) {\n      const {\n        trackId,\n        offset\n      } = trackSampleOffset;\n      await client.cancelResponse(trackId, offset);\n    }\n    await wavRecorder.record(data => client.appendInputAudio(data.mono));\n  };\n\n  // /**\n  //  * In push-to-talk mode, stop recording\n  //  */\n  const stopRecording = async () => {\n    setIsRecording(false);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.pause();\n    client.createResponse();\n  };\n\n  // const startRecording = async () => {\n  //   const wavRecorder = wavRecorderRef.current;\n  //   console.log(\"recording or not\",wavRecorder.recording);\n  //   // Check if the recorder is already active\n  //   if (wavRecorder.recording) {\n  //     console.log('Recording is already active.');\n  //     return; // Do not start a new recording session\n  //   }\n\n  //   try {\n  //     console.log('Starting a new recording session...');\n\n  //     // If session is not active, start it\n  //     await wavRecorder.begin();\n  //     setIsRecording(true);\n\n  //     const client = clientRef.current;\n  //     const wavStreamPlayer = wavStreamPlayerRef.current;\n  //     console.log(\"recording\",isRecording);\n  //     // Check if we need to interrupt the stream player before recording\n  //     const trackSampleOffset = await wavStreamPlayer.interrupt();\n  //     if (trackSampleOffset?.trackId) {\n  //       const { trackId, offset } = trackSampleOffset;\n  //       await client.cancelResponse(trackId, offset);\n  //     }\n\n  //     // Start recording and send audio data to the client\n  //     await wavRecorder.record((data) => {\n  //       console.log('Audio data received:', data.mono); // Log the audio data in the console\n  //       client.appendInputAudio(data.mono);\n  //     });\n\n  //   } catch (err) {\n  //     console.error('Error while starting recording:', err);\n  //   }\n  // };\n\n  // const stopRecording = async () => {\n  //   const wavRecorder = wavRecorderRef.current;\n  //   console.log(\"recording or not\",wavRecorder.recording);\n\n  //   // Check if not recording, then skip pausing\n  //   if (!wavRecorder.recording) {\n  //     console.warn('Already paused, skipping stop.');\n  //     return;\n  //   }\n\n  //   setIsRecording(false);\n  //   const client = clientRef.current;\n  //   await wavRecorder.pause();\n  //   client.createResponse();\n  // };\n\n  /**\n   * Switch between Manual <> VAD mode for communication\n   \n  const changeTurnEndType = async (value: string) => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\n      await wavRecorder.pause();\n    }\n    client.updateSession({\n      turn_detection: value === 'none' ? null : { type: 'server_vad' },\n    });\n    if (value === 'server_vad' && client.isConnected()) {\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n    }\n    setCanPushToTalk(value === 'none');\n  };\n   /*****\n   * Auto-scroll the event logs\n   */\n  useEffect(() => {\n    if (eventsScrollRef.current) {\n      const eventsEl = eventsScrollRef.current;\n      const scrollHeight = eventsEl.scrollHeight;\n      // Only scroll if height has just changed\n      if (scrollHeight !== eventsScrollHeightRef.current) {\n        eventsEl.scrollTop = scrollHeight;\n        eventsScrollHeightRef.current = scrollHeight;\n      }\n    }\n  }, [realtimeEvents]);\n\n  /**\n   * Auto-scroll the conversation logs\n   */\n  useEffect(() => {\n    const conversationEls = [].slice.call(document.body.querySelectorAll('[data-conversation-content]'));\n    for (const el of conversationEls) {\n      const conversationEl = el;\n      conversationEl.scrollTop = conversationEl.scrollHeight;\n    }\n  }, [items]);\n\n  /**\n   * Set up render loops for the visualization canvas\n   */\n  useEffect(() => {\n    let isLoaded = true;\n    const wavRecorder = wavRecorderRef.current;\n    const clientCanvas = clientCanvasRef.current;\n    let clientCtx = null;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const serverCanvas = serverCanvasRef.current;\n    let serverCtx = null;\n    const render = () => {\n      if (isLoaded) {\n        if (clientCanvas) {\n          if (!clientCanvas.width || !clientCanvas.height) {\n            clientCanvas.width = clientCanvas.offsetWidth;\n            clientCanvas.height = clientCanvas.offsetHeight;\n          }\n          clientCtx = clientCtx || clientCanvas.getContext('2d');\n          if (clientCtx) {\n            clientCtx.clearRect(0, 0, clientCanvas.width, clientCanvas.height);\n            const result = wavRecorder.recording ? wavRecorder.getFrequencies('voice') : {\n              values: new Float32Array([0])\n            };\n            WavRenderer.drawBars(clientCanvas, clientCtx, result.values, '#0099ff', 10, 0, 8);\n          }\n        }\n        if (serverCanvas) {\n          if (!serverCanvas.width || !serverCanvas.height) {\n            serverCanvas.width = serverCanvas.offsetWidth;\n            serverCanvas.height = serverCanvas.offsetHeight;\n          }\n          serverCtx = serverCtx || serverCanvas.getContext('2d');\n          if (serverCtx) {\n            serverCtx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);\n            const result = wavStreamPlayer.analyser ? wavStreamPlayer.getFrequencies('voice') : {\n              values: new Float32Array([0])\n            };\n            WavRenderer.drawBars(serverCanvas, serverCtx, result.values, '#009900', 10, 0, 8);\n          }\n        }\n        window.requestAnimationFrame(render);\n      }\n    };\n    render();\n    return () => {\n      isLoaded = false;\n    };\n  }, []);\n\n  /**************************************************************************************\n     * Core RealtimeClient and audio capture setup\n     * Set all of our instructions, tools, events, and more\n     */\n  useEffect(() => {\n    // Get refs\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const client = clientRef.current;\n\n    // Initialize SimliClient\n    if (videoRef.current && audioRef.current) {\n      const simliApiKey = process.env.REACT_APP_SIMLI_API_KEY;\n      const simliFaceID = process.env.REACT_APP_SIMLI_FACE_ID;\n      if (!simliApiKey || !simliFaceID) {\n        console.error('Simli API key or Face ID is not defined');\n      } else {\n        const SimliConfig = {\n          apiKey: simliApiKey,\n          faceID: simliFaceID,\n          handleSilence: true,\n          videoRef: videoRef,\n          audioRef: audioRef\n        };\n        simliClientRef.current = new SimliClient();\n        simliClientRef.current.Initialize(SimliConfig);\n        console.log('Simli Client initialized');\n      }\n    }\n\n    // Set instructions\n    client.updateSession({\n      instructions: instructions\n    });\n    // Set transcription, otherwise we don't get user transcriptions back\n    client.updateSession({\n      input_audio_transcription: {\n        model: 'whisper-1'\n      }\n    });\n\n    // handle realtime events from client + server for event logging\n    client.on('realtime.event', realtimeEvent => {\n      setRealtimeEvents(realtimeEvents => {\n        const lastEvent = realtimeEvents[realtimeEvents.length - 1];\n        if ((lastEvent === null || lastEvent === void 0 ? void 0 : lastEvent.event.type) === realtimeEvent.event.type) {\n          lastEvent.count = (lastEvent.count || 0) + 1;\n          return realtimeEvents.slice(0, -1).concat(lastEvent);\n        } else {\n          return realtimeEvents.concat(realtimeEvent);\n        }\n      });\n    });\n    client.on('error', event => console.error(event));\n    client.on('conversation.interrupted', async () => {\n      // Stop sending further audio data to Simli\n      simliAudioBufferRef.current = [];\n    });\n    client.on('conversation.updated', async ({\n      item,\n      delta\n    }) => {\n      var _item$formatted$audio;\n      const items = client.conversation.getItems();\n      if (delta !== null && delta !== void 0 && delta.audio) {\n        if (simliClientRef.current) {\n          const audioData = new Int16Array(delta.audio);\n          const resampledAudioData = resampleAudioData(audioData, 24000, 16000);\n          if (isSimliDataChannelOpen()) {\n            // Send buffered audio first\n            if (simliAudioBufferRef.current.length > 0) {\n              simliAudioBufferRef.current.forEach(bufferedData => {\n                simliClientRef.current.sendAudioData(bufferedData);\n              });\n              simliAudioBufferRef.current = [];\n            }\n            // Send current resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliClientRef.current.sendAudioData(resampledAudioDataUint8);\n          } else {\n            // Buffer the resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliAudioBufferRef.current.push(resampledAudioDataUint8);\n            console.warn('Data channel is not open yet, buffering audio data');\n          }\n        }\n      }\n      if (item.status === 'completed' && (_item$formatted$audio = item.formatted.audio) !== null && _item$formatted$audio !== void 0 && _item$formatted$audio.length) {\n        const wavFile = await WavRecorder.decode(item.formatted.audio, 24000, 24000);\n        item.formatted.file = wavFile;\n      }\n      setItems(items);\n    });\n    setItems(client.conversation.getItems());\n    return () => {\n      // cleanup; resets to defaults\n      client.reset();\n\n      // Close SimliClient on unmount\n      if (simliClientRef.current) {\n        simliClientRef.current.close();\n      }\n    };\n  }, []);\n\n  /***************************************************************************************\n   * Render the application\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-component\": \"ConsolePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/openai-logomark.svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"realtime console\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-api-key\",\n        children: !USE_LOCAL_RELAY_SERVER_URL && /*#__PURE__*/_jsxDEV(Button, {\n          icon: Edit,\n          iconPosition: \"end\",\n          buttonStyle: \"flush\",\n          label: `api key: ${apiKey.slice(0, 3)}...`,\n          onClick: () => resetAPIKey()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-avatar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-avatar-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"video\", {\n              ref: videoRef,\n              autoPlay: true,\n              playsInline: true,\n              muted: true,\n              style: {\n                width: '100%',\n                height: 'auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n              ref: audioRef,\n              autoPlay: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-block conversation\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-body\",\n            \"data-conversation-content\": true,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"center-text\",\n              children: !items.length && \"...let's get connected!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 15\n            }, this), items.map((conversationItem, i) => {\n              var _conversationItem$for;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"conversation-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `speaker ${conversationItem.role || ''}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: (conversationItem.role || conversationItem.type).replaceAll('_', ' ')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 663,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"close\",\n                    onClick: () => deleteConversationItem(conversationItem.id),\n                    children: /*#__PURE__*/_jsxDEV(X, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 674,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 668,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 662,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"speaker-content\",\n                  children: [conversationItem.type === 'function_call_output' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: conversationItem.formatted.output\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 679,\n                    columnNumber: 25\n                  }, this), !!conversationItem.formatted.tool && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [conversationItem.formatted.tool.name, \"(\", conversationItem.formatted.tool.arguments, \")\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 682,\n                    columnNumber: 25\n                  }, this), !conversationItem.formatted.tool && conversationItem.role === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: conversationItem.formatted.transcript || ((_conversationItem$for = conversationItem.formatted.audio) !== null && _conversationItem$for !== void 0 && _conversationItem$for.length ? '(awaiting transcript)' : conversationItem.formatted.text || '(item sent)')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 689,\n                    columnNumber: 27\n                  }, this), !conversationItem.formatted.tool && conversationItem.role === 'assistant' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: conversationItem.formatted.transcript || conversationItem.formatted.text || '(truncated)'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 699,\n                    columnNumber: 27\n                  }, this), conversationItem.formatted.file && /*#__PURE__*/_jsxDEV(\"audio\", {\n                    src: conversationItem.formatted.file.url,\n                    controls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 706,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 677,\n                  columnNumber: 21\n                }, this)]\n              }, conversationItem.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 661,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              label: isRecording ? 'Release to Send' : 'Push to Talk',\n              style: {\n                backgroundColor: isRecording ? 'red' : 'green',\n                color: 'white'\n              },\n              buttonStyle: isRecording ? 'alert' : 'regular',\n              disabled: !isConnected || !canPushToTalk || isRecording // Disable button while recording\n              ,\n              onMouseDown: () => {\n                console.log('Mouse down: starting recording');\n                startRecording();\n              },\n              onMouseUp: () => {\n                console.log('Mouse up: stopping recording');\n                stopRecording();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              label: isConnected ? 'Disconnect' : 'Connect',\n              iconPosition: isConnected ? 'end' : 'start',\n              icon: isConnected ? X : Zap,\n              buttonStyle: isConnected ? 'regular' : 'action',\n              onClick: isConnected ? disconnectConversation : connectConversation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 739,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 720,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 616,\n    columnNumber: 5\n  }, this);\n}\n_s(ConsolePage, \"12G9bUgvWZQIE6eYYvfZxEF0u8o=\");\n_c = ConsolePage;\nvar _c;\n$RefreshReg$(_c, \"ConsolePage\");","map":{"version":3,"names":["useEffect","useRef","useCallback","useState","RealtimeClient","WavRecorder","WavStreamPlayer","instructions","WavRenderer","X","Edit","Zap","Button","SimliClient","jsxDEV","_jsxDEV","USE_LOCAL_RELAY_SERVER_URL","undefined","resampleAudioData","inputData","inputSampleRate","outputSampleRate","sampleRateRatio","outputLength","Math","round","length","outputData","Int16Array","i","sourceIndex","lowerIndex","floor","upperIndex","min","interpolation","ConsolePage","_s","apiKey","localStorage","getItem","prompt","setItem","wavRecorderRef","sampleRate","wavStreamPlayerRef","clientRef","url","dangerouslyAllowAPIKeyInBrowser","videoRef","audioRef","simliClientRef","simliAudioBufferRef","clientCanvasRef","serverCanvasRef","eventsScrollHeightRef","eventsScrollRef","startTimeRef","Date","toISOString","items","setItems","realtimeEvents","setRealtimeEvents","expandedEvents","setExpandedEvents","isConnected","setIsConnected","canPushToTalk","setCanPushToTalk","isRecording","setIsRecording","memoryKv","setMemoryKv","formatTime","timestamp","startTime","current","t0","valueOf","t1","delta","hs","s","m","pad","n","resetAPIKey","clear","window","location","reload","isSimliDataChannelOpen","pc","dc","iceConnectionState","readyState","connectConversation","client","wavRecorder","wavStreamPlayer","constraints","audio","echoCancellation","noiseSuppression","autoGainControl","conversation","getItems","start","audioData","Uint8Array","fill","sendAudioData","console","log","connect","begin","getTurnDetectionType","record","data","appendInputAudio","mono","changeVoiceType","allowedVoices","voice","process","env","REACT_APP_VOICE","validVoice","includes","updateSession","disconnectConversation","disconnect","end","interrupt","close","deleteConversationItem","id","deleteItem","startRecording","trackSampleOffset","recording","trackId","offset","cancelResponse","stopRecording","pause","createResponse","eventsEl","scrollHeight","scrollTop","conversationEls","slice","call","document","body","querySelectorAll","el","conversationEl","isLoaded","clientCanvas","clientCtx","serverCanvas","serverCtx","render","width","height","offsetWidth","offsetHeight","getContext","clearRect","result","getFrequencies","values","Float32Array","drawBars","analyser","requestAnimationFrame","simliApiKey","REACT_APP_SIMLI_API_KEY","simliFaceID","REACT_APP_SIMLI_FACE_ID","error","SimliConfig","faceID","handleSilence","Initialize","input_audio_transcription","model","on","realtimeEvent","lastEvent","event","type","count","concat","item","_item$formatted$audio","resampledAudioData","forEach","bufferedData","resampledAudioDataUint8","buffer","push","warn","status","formatted","wavFile","decode","file","reset","children","className","src","fileName","_jsxFileName","lineNumber","columnNumber","icon","iconPosition","buttonStyle","label","onClick","ref","autoPlay","playsInline","muted","style","map","conversationItem","_conversationItem$for","role","replaceAll","output","tool","name","arguments","transcript","text","controls","backgroundColor","color","disabled","onMouseDown","onMouseUp","_c","$RefreshReg$"],"sources":["/Users/johnpaulreju/git_dashboard/simli/simli-openai-realtime/src/pages/ConsolePage.tsx"],"sourcesContent":["import { useEffect, useRef, useCallback, useState } from 'react';\nimport { RealtimeClient } from '../lib/realtime-api-beta/index.js';\nimport { ItemType } from '../lib/realtime-api-beta/dist/lib/client.js';\nimport { WavRecorder, WavStreamPlayer } from '../lib/wavtools/index.js';\nimport { instructions } from '../utils/conversation_config.js';\nimport { WavRenderer } from '../utils/wav_renderer';\nimport { X, Edit, Zap, ArrowUp, ArrowDown } from 'react-feather';\nimport { Button } from '../components/button/Button';\nimport { Toggle } from '../components/toggle/Toggle';\nimport './ConsolePage.scss';\nimport { SimliClient } from 'simli-client'; // Import SimliClient\n\n/**\n * Change this if you want to connect to a local relay server!\n * This will require you to set OPENAI_API_KEY= in a .env file\n * You can run it with npm run relay, in parallel with npm start\n *\n * Simply switch the lines by commenting one and removing the other\n */\n// const USE_LOCAL_RELAY_SERVER_URL: string | undefined = 'http://localhost:8081';\nconst USE_LOCAL_RELAY_SERVER_URL: string | undefined = undefined;\n\n/**\n * Type for all event logs\n */\ninterface RealtimeEvent {\n  time: string;\n  source: 'client' | 'server';\n  count?: number;\n  event: { [key: string]: any };\n}\n\nfunction resampleAudioData(\n  inputData: Int16Array,\n  inputSampleRate: number,\n  outputSampleRate: number\n): Int16Array {\n  const sampleRateRatio = inputSampleRate / outputSampleRate;\n  const outputLength = Math.round(inputData.length / sampleRateRatio);\n  const outputData = new Int16Array(outputLength);\n\n  for (let i = 0; i < outputLength; i++) {\n    const sourceIndex = i * sampleRateRatio;\n    const lowerIndex = Math.floor(sourceIndex);\n    const upperIndex = Math.min(lowerIndex + 1, inputData.length - 1);\n    const interpolation = sourceIndex - lowerIndex;\n    outputData[i] =\n      (1 - interpolation) * inputData[lowerIndex] +\n      interpolation * inputData[upperIndex];\n  }\n\n  return outputData;\n}\n\n\nexport function ConsolePage() {\n  /**\n   * Ask user for API Key\n   * If we're using the local relay server, we don't need this\n   */\n  const apiKey = USE_LOCAL_RELAY_SERVER_URL\n    ? ''\n    : localStorage.getItem('tmp::voice_api_key') ||\n      prompt('OpenAI API Key') ||\n      '';\n  if (apiKey !== '') {\n    localStorage.setItem('tmp::voice_api_key', apiKey);\n  }\n\n  /**\n   * Instantiate:\n   * - WavRecorder (speech input)\n   * - WavStreamPlayer (speech output)\n   * - RealtimeClient (API client)\n   */\n  const wavRecorderRef = useRef<WavRecorder>(\n    new WavRecorder({ sampleRate: 24000 })\n  );\n  const wavStreamPlayerRef = useRef<WavStreamPlayer>(\n    new WavStreamPlayer({ sampleRate: 24000 })\n  );\n  const clientRef = useRef<RealtimeClient>(\n    new RealtimeClient(\n      USE_LOCAL_RELAY_SERVER_URL\n        ? { url: USE_LOCAL_RELAY_SERVER_URL }\n        : {\n            apiKey: apiKey,\n            dangerouslyAllowAPIKeyInBrowser: true,\n          }\n    )\n  );\n\n  // Simli refs\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const simliClientRef = useRef<SimliClient | null>(null);\n  const simliAudioBufferRef = useRef<Uint8Array[]>([]);\n\n  /**\n   * References for\n   * - Rendering audio visualization (canvas)\n   * - Autoscrolling event logs\n   */\n  const clientCanvasRef = useRef<HTMLCanvasElement>(null);\n  const serverCanvasRef = useRef<HTMLCanvasElement>(null);\n  const eventsScrollHeightRef = useRef(0);\n  const eventsScrollRef = useRef<HTMLDivElement>(null);\n  const startTimeRef = useRef<string>(new Date().toISOString());\n\n  /**\n   * All of our variables for displaying application state\n   * - items are all conversation items (dialog)\n   * - realtimeEvents are event logs, which can be expanded\n   * - memoryKv is for set_memory() function\n   */\n  const [items, setItems] = useState<ItemType[]>([]);\n  const [realtimeEvents, setRealtimeEvents] = useState<RealtimeEvent[]>([]);\n  const [expandedEvents, setExpandedEvents] = useState<{\n    [key: string]: boolean;\n  }>({});\n  const [isConnected, setIsConnected] = useState(false);\n  const [canPushToTalk, setCanPushToTalk] = useState(true);\n  const [isRecording, setIsRecording] = useState(false);\n  const [memoryKv, setMemoryKv] = useState<{ [key: string]: any }>({});\n\n  /**\n   * Utility for formatting the timing of logs\n   */\n  const formatTime = useCallback((timestamp: string) => {\n    const startTime = startTimeRef.current;\n    const t0 = new Date(startTime).valueOf();\n    const t1 = new Date(timestamp).valueOf();\n    const delta = t1 - t0;\n    const hs = Math.floor(delta / 10) % 100;\n    const s = Math.floor(delta / 1000) % 60;\n    const m = Math.floor(delta / 60_000) % 60;\n    const pad = (n: number) => {\n      let s = n + '';\n      while (s.length < 2) {\n        s = '0' + s;\n      }\n      return s;\n    };\n    return `${pad(m)}:${pad(s)}.${pad(hs)}`;\n  }, []);\n\n  /**\n   * When you click the API key\n   */\n  const resetAPIKey = useCallback(() => {\n    const apiKey = prompt('OpenAI API Key');\n    if (apiKey !== null) {\n      localStorage.clear();\n      localStorage.setItem('tmp::voice_api_key', apiKey);\n      window.location.reload();\n    }\n  }, []);\n\n  const isSimliDataChannelOpen = () => {\n    if (!simliClientRef.current) return false;\n  \n    // Access internal properties (may vary depending on SimliClient implementation)\n    const pc = (simliClientRef.current as any).pc as RTCPeerConnection | null;\n    const dc = (simliClientRef.current as any).dc as RTCDataChannel | null;\n  \n    return (\n      pc !== null &&\n      pc.iceConnectionState === 'connected' &&\n      dc !== null &&\n      dc.readyState === 'open'\n    );\n  };\n  \n  /**\n   * Connect to conversation:\n   * WavRecorder takes speech input, WavStreamPlayer output, client is API client\n   */\n  const connectConversation = useCallback(async () => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n\n     // Define audio constraints for noise suppression, echo cancellation, and auto gain control\n    const constraints = {\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n        autoGainControl: true,\n      },\n    };\n\n    // Set state variables\n    startTimeRef.current = new Date().toISOString();\n    setIsConnected(true);\n    setRealtimeEvents([]);\n    setItems(client.conversation.getItems());\n  \n    // Start Simli WebRTC connection\n    if (simliClientRef.current) {\n      simliClientRef.current.start();\n  \n      // Send empty audio data to Simli\n      const audioData = new Uint8Array(6000).fill(0);\n      simliClientRef.current.sendAudioData(audioData);\n      console.log('Sent initial empty audio data to Simli');\n    }\n  \n    // Now connect to OpenAI's realtime API\n    await client.connect();\n  \n    // Connect to microphone\n    await wavRecorder.begin();\n  \n    // Connect to audio output\n    await wavStreamPlayer.connect();\n    \n    if (client.getTurnDetectionType() === 'server_vad') {\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n    }\n  }, []);\n  \n  const changeVoiceType = async () => {\n    const client = clientRef.current;\n    \n    /**\n    // Access the voice setting from the environment variable\n    */\n    // Define allowed voices\n    const allowedVoices: Array<'shimmer' | 'alloy' | 'echo'> = ['shimmer', 'alloy', 'echo'];\n\n    // Get voice from environment variable (defaults to 'shimmer' if not set)\n    const voice = process.env.REACT_APP_VOICE || 'shimmer';\n\n    // Validate that the voice is one of the allowed options\n    const validVoice = allowedVoices.includes(voice as 'shimmer' | 'alloy' | 'echo')\n      ? (voice as 'shimmer' | 'alloy' | 'echo') \n      : 'shimmer';  // Default to 'shimmer' if invalid\n\n    client.updateSession({\n      voice: validVoice,\n    });\n  };\n\n  // Use useEffect to call the function on component mount\n  useEffect(() => {\n    changeVoiceType();\n  }, []);\n\n\n  /**\n   * Disconnect and reset conversation state\n   */\n  // const disconnectConversation = useCallback(async () => {\n  //   setIsConnected(false);\n  //   setRealtimeEvents([]);\n  //   setItems([]);\n  //   setMemoryKv({});\n\n  //   const client = clientRef.current;\n  //   client.disconnect();\n\n  //   const wavRecorder = wavRecorderRef.current;\n  //   await wavRecorder.end();\n\n  //   const wavStreamPlayer = wavStreamPlayerRef.current;\n  //   await wavStreamPlayer.interrupt();\n\n  //   // Close Simli connection\n  //   if (simliClientRef.current) {\n  //     simliClientRef.current.close();\n  //   }\n  // }, []);\n  const disconnectConversation = useCallback(async () => {\n    setIsConnected(false);\n    setRealtimeEvents([]);\n    setItems([]);\n    setMemoryKv({});\n  \n    const client = clientRef.current;\n    client.disconnect();\n  \n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.end(); // End the recording session properly\n  \n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    await wavStreamPlayer.interrupt();\n    if (simliClientRef.current) {\n        simliClientRef.current.close();\n      }\n  }, []);\n  \n\n  const deleteConversationItem = useCallback(async (id: string) => {\n    const client = clientRef.current;\n    client.deleteItem(id);\n  }, []);\n\n  /**\n   * In push-to-talk mode, start recording\n   * .appendInputAudio() for each sample\n   */\n  const startRecording = async () => {\n    setIsRecording(true);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const trackSampleOffset = await wavStreamPlayer.interrupt();\n    console.log(\"recording or not\",wavRecorder.recording);\n    if (trackSampleOffset?.trackId) {\n      const { trackId, offset } = trackSampleOffset;\n      await client.cancelResponse(trackId, offset);\n    }\n    await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n  };\n\n  // /**\n  //  * In push-to-talk mode, stop recording\n  //  */\n  const stopRecording = async () => {\n    setIsRecording(false);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.pause();\n    client.createResponse();\n  };\n\n  // const startRecording = async () => {\n  //   const wavRecorder = wavRecorderRef.current;\n  //   console.log(\"recording or not\",wavRecorder.recording);\n  //   // Check if the recorder is already active\n  //   if (wavRecorder.recording) {\n  //     console.log('Recording is already active.');\n  //     return; // Do not start a new recording session\n  //   }\n  \n  //   try {\n  //     console.log('Starting a new recording session...');\n  \n  //     // If session is not active, start it\n  //     await wavRecorder.begin();\n  //     setIsRecording(true);\n  \n  //     const client = clientRef.current;\n  //     const wavStreamPlayer = wavStreamPlayerRef.current;\n  //     console.log(\"recording\",isRecording);\n  //     // Check if we need to interrupt the stream player before recording\n  //     const trackSampleOffset = await wavStreamPlayer.interrupt();\n  //     if (trackSampleOffset?.trackId) {\n  //       const { trackId, offset } = trackSampleOffset;\n  //       await client.cancelResponse(trackId, offset);\n  //     }\n  \n  //     // Start recording and send audio data to the client\n  //     await wavRecorder.record((data) => {\n  //       console.log('Audio data received:', data.mono); // Log the audio data in the console\n  //       client.appendInputAudio(data.mono);\n  //     });\n      \n  //   } catch (err) {\n  //     console.error('Error while starting recording:', err);\n  //   }\n  // };\n  \n  \n  \n  \n  // const stopRecording = async () => {\n  //   const wavRecorder = wavRecorderRef.current;\n  //   console.log(\"recording or not\",wavRecorder.recording);\n\n  //   // Check if not recording, then skip pausing\n  //   if (!wavRecorder.recording) {\n  //     console.warn('Already paused, skipping stop.');\n  //     return;\n  //   }\n  \n  //   setIsRecording(false);\n  //   const client = clientRef.current;\n  //   await wavRecorder.pause();\n  //   client.createResponse();\n  // };\n  \n  /**\n   * Switch between Manual <> VAD mode for communication\n   \n  const changeTurnEndType = async (value: string) => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\n      await wavRecorder.pause();\n    }\n    client.updateSession({\n      turn_detection: value === 'none' ? null : { type: 'server_vad' },\n    });\n    if (value === 'server_vad' && client.isConnected()) {\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n    }\n    setCanPushToTalk(value === 'none');\n  };\n\n  /*****\n   * Auto-scroll the event logs\n   */\n  useEffect(() => {\n    if (eventsScrollRef.current) {\n      const eventsEl = eventsScrollRef.current;\n      const scrollHeight = eventsEl.scrollHeight;\n      // Only scroll if height has just changed\n      if (scrollHeight !== eventsScrollHeightRef.current) {\n        eventsEl.scrollTop = scrollHeight;\n        eventsScrollHeightRef.current = scrollHeight;\n      }\n    }\n  }, [realtimeEvents]);\n\n  /**\n   * Auto-scroll the conversation logs\n   */\n  useEffect(() => {\n    const conversationEls = [].slice.call(\n      document.body.querySelectorAll('[data-conversation-content]')\n    );\n    for (const el of conversationEls) {\n      const conversationEl = el as HTMLDivElement;\n      conversationEl.scrollTop = conversationEl.scrollHeight;\n    }\n  }, [items]);\n\n  /**\n   * Set up render loops for the visualization canvas\n   */\n  useEffect(() => {\n    let isLoaded = true;\n\n    const wavRecorder = wavRecorderRef.current;\n    const clientCanvas = clientCanvasRef.current;\n    let clientCtx: CanvasRenderingContext2D | null = null;\n\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const serverCanvas = serverCanvasRef.current;\n    let serverCtx: CanvasRenderingContext2D | null = null;\n\n    const render = () => {\n      if (isLoaded) {\n        if (clientCanvas) {\n          if (!clientCanvas.width || !clientCanvas.height) {\n            clientCanvas.width = clientCanvas.offsetWidth;\n            clientCanvas.height = clientCanvas.offsetHeight;\n          }\n          clientCtx = clientCtx || clientCanvas.getContext('2d');\n          if (clientCtx) {\n            clientCtx.clearRect(0, 0, clientCanvas.width, clientCanvas.height);\n            const result = wavRecorder.recording\n              ? wavRecorder.getFrequencies('voice')\n              : { values: new Float32Array([0]) };\n            WavRenderer.drawBars(\n              clientCanvas,\n              clientCtx,\n              result.values,\n              '#0099ff',\n              10,\n              0,\n              8\n            );\n          }\n        }\n        if (serverCanvas) {\n          if (!serverCanvas.width || !serverCanvas.height) {\n            serverCanvas.width = serverCanvas.offsetWidth;\n            serverCanvas.height = serverCanvas.offsetHeight;\n          }\n          serverCtx = serverCtx || serverCanvas.getContext('2d');\n          if (serverCtx) {\n            serverCtx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);\n            const result = wavStreamPlayer.analyser\n              ? wavStreamPlayer.getFrequencies('voice')\n              : { values: new Float32Array([0]) };\n            WavRenderer.drawBars(\n              serverCanvas,\n              serverCtx,\n              result.values,\n              '#009900',\n              10,\n              0,\n              8\n            );\n          }\n        }\n        window.requestAnimationFrame(render);\n      }\n    };\n    render();\n\n    return () => {\n      isLoaded = false;\n    };\n  }, []);\n\n\n/**************************************************************************************\n   * Core RealtimeClient and audio capture setup\n   * Set all of our instructions, tools, events, and more\n   */\n  useEffect(() => {\n    // Get refs\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const client = clientRef.current;\n\n    // Initialize SimliClient\n    if (videoRef.current && audioRef.current) {\n      const simliApiKey = process.env.REACT_APP_SIMLI_API_KEY;\n      const simliFaceID = process.env.REACT_APP_SIMLI_FACE_ID;\n\n      if (!simliApiKey || !simliFaceID) {\n        console.error('Simli API key or Face ID is not defined');\n      } else {\n        const SimliConfig = {\n          apiKey: simliApiKey,\n          faceID: simliFaceID,\n          handleSilence: true,\n          videoRef: videoRef,\n          audioRef: audioRef,\n        };\n\n        simliClientRef.current = new SimliClient();\n        simliClientRef.current.Initialize(SimliConfig);\n        \n        console.log('Simli Client initialized');\n      }\n    }\n\n    // Set instructions\n    client.updateSession({ instructions: instructions });\n    // Set transcription, otherwise we don't get user transcriptions back\n    client.updateSession({ input_audio_transcription: { model: 'whisper-1' } });\n\n    // handle realtime events from client + server for event logging\n    client.on('realtime.event', (realtimeEvent: RealtimeEvent) => {\n      setRealtimeEvents((realtimeEvents) => {\n        const lastEvent = realtimeEvents[realtimeEvents.length - 1];\n        if (lastEvent?.event.type === realtimeEvent.event.type) {\n          lastEvent.count = (lastEvent.count || 0) + 1;\n          return realtimeEvents.slice(0, -1).concat(lastEvent);\n        } else {\n          return realtimeEvents.concat(realtimeEvent);\n        }\n      });\n    });\n    client.on('error', (event: any) => console.error(event));\n    client.on('conversation.interrupted', async () => {\n      // Stop sending further audio data to Simli\n      simliAudioBufferRef.current = [];\n\n    });\n    \n    client.on('conversation.updated', async ({ item, delta }: any) => {\n      const items = client.conversation.getItems();\n    \n      if (delta?.audio) {\n        if (simliClientRef.current) {\n          const audioData = new Int16Array(delta.audio);\n          const resampledAudioData = resampleAudioData(audioData, 24000, 16000);\n    \n          if (isSimliDataChannelOpen()) {\n            // Send buffered audio first\n            if (simliAudioBufferRef.current.length > 0) {\n              simliAudioBufferRef.current.forEach((bufferedData) => {\n                simliClientRef.current!.sendAudioData(bufferedData);\n              });\n              simliAudioBufferRef.current = [];\n            }\n            // Send current resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliClientRef.current.sendAudioData(resampledAudioDataUint8);\n          } else {\n            // Buffer the resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliAudioBufferRef.current.push(resampledAudioDataUint8);\n            console.warn('Data channel is not open yet, buffering audio data');\n          }\n        }\n      }\n    \n      if (item.status === 'completed' && item.formatted.audio?.length) {\n        const wavFile = await WavRecorder.decode(\n          item.formatted.audio,\n          24000,\n          24000\n        );\n        item.formatted.file = wavFile;\n      }\n      setItems(items);\n    });\n    \n    \n\n    setItems(client.conversation.getItems());\n\n    return () => {\n      // cleanup; resets to defaults\n      client.reset();\n\n      // Close SimliClient on unmount\n      if (simliClientRef.current) {\n        simliClientRef.current.close();\n      }\n    };\n  }, []);\n\n\n\n/***************************************************************************************\n * Render the application\n */\n  return (\n    <div data-component=\"ConsolePage\">\n      <div className=\"content-top\">\n        <div className=\"content-title\">\n          <img src=\"/openai-logomark.svg\" />\n          <span>realtime console</span>\n        </div>\n        <div className=\"content-api-key\">\n          {!USE_LOCAL_RELAY_SERVER_URL && (\n            <Button\n              icon={Edit}\n              iconPosition=\"end\"\n              buttonStyle=\"flush\"\n              label={`api key: ${apiKey.slice(0, 3)}...`}\n              onClick={() => resetAPIKey()}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"content-main\">\n        {/* Center Avatar Above Conversation */}\n        <div className=\"content-center\">\n          {/* Simli Avatar Display */}\n          <div className=\"content-avatar\">\n            <div className=\"content-block-title\"></div>\n            <div className=\"content-avatar-body\">\n              <video\n                ref={videoRef}\n                autoPlay\n                playsInline\n                muted\n                style={{ width: '100%', height: 'auto' }}\n              />\n              <audio ref={audioRef} autoPlay/>\n            </div>\n          </div>\n\n          {/* Conversation Block */}\n          <div className=\"content-block conversation\">\n            <div className=\"content-block-title\"></div>\n            <div className=\"content-block-body\" data-conversation-content>\n              <div className=\"center-text\">\n                {!items.length && \"...let's get connected!\"}\n              </div>\n              {items.map((conversationItem, i) => {\n                return (\n                  <div className=\"conversation-item\" key={conversationItem.id}>\n                    <div className={`speaker ${conversationItem.role || ''}`}>\n                      <div>\n                        {(\n                          conversationItem.role || conversationItem.type\n                        ).replaceAll('_', ' ')}\n                      </div>\n                      <div\n                        className=\"close\"\n                        onClick={() =>\n                          deleteConversationItem(conversationItem.id)\n                        }\n                      >\n                        <X />\n                      </div>\n                    </div>\n                    <div className=\"speaker-content\">\n                      {conversationItem.type === 'function_call_output' && (\n                        <div>{conversationItem.formatted.output}</div>\n                      )}\n                      {!!conversationItem.formatted.tool && (\n                        <div>\n                          {conversationItem.formatted.tool.name}(\n                          {conversationItem.formatted.tool.arguments})\n                        </div>\n                      )}\n                      {!conversationItem.formatted.tool &&\n                        conversationItem.role === 'user' && (\n                          <div>\n                            {conversationItem.formatted.transcript ||\n                              (conversationItem.formatted.audio?.length\n                                ? '(awaiting transcript)'\n                                : conversationItem.formatted.text ||\n                                  '(item sent)')}\n                          </div>\n                        )}\n                      {!conversationItem.formatted.tool &&\n                        conversationItem.role === 'assistant' && (\n                          <div>\n                            {conversationItem.formatted.transcript ||\n                              conversationItem.formatted.text ||\n                              '(truncated)'}\n                          </div>\n                        )}\n                      {conversationItem.formatted.file && (\n                        <audio\n                          src={conversationItem.formatted.file.url}\n                          controls\n                        />\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"content-actions\">\n            <div className=\"button-container\">\n              <Button\n                label={isRecording ? 'Release to Send' : 'Push to Talk'}\n                style={{\n                  backgroundColor: isRecording ? 'red' : 'green',\n                  color: 'white',\n                }}\n                buttonStyle={isRecording ? 'alert' : 'regular'}\n                disabled={!isConnected || !canPushToTalk || isRecording} // Disable button while recording\n                onMouseDown={() => {\n                  console.log('Mouse down: starting recording');\n                  startRecording();\n                }}\n                onMouseUp={() => {\n                  console.log('Mouse up: stopping recording');\n                  stopRecording();\n                }}\n              />\n\n              <Button\n                label={isConnected ? 'Disconnect' : 'Connect'}\n                iconPosition={isConnected ? 'end' : 'start'}\n                icon={isConnected ? X : Zap}\n                buttonStyle={isConnected ? 'regular' : 'action'}\n                onClick={\n                  isConnected ? disconnectConversation : connectConversation\n                }\n              />\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}